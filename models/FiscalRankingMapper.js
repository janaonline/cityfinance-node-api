require("./dbConnect");
const { modelSchema } = require('./constants')
const fiscalRankingMapperSchema = new Schema(
    {
        fiscal_ranking: { type: Schema.Types.ObjectId, ref: "FiscalRanking", required: true },
        ulb: { type: Schema.Types.ObjectId, ref: "Ulb", required: true },
        year: { type: Schema.Types.ObjectId, ref: "Year", required: true },
        value: { type: Number, default: null },
        date: { type: Date, default: null }, // audit date
        status: {
            type: String,
            default: "PENDING",
            enum: {
                values: ["PENDING", "APPROVED", "REJECTED", "NA"],
                message: "ERROR: STATUS BE EITHER 'PENDING'/ 'APPROVED' / 'REJECTED'",
            },
        },
        isActive: { type: Boolean, default: 1 },
        dataSource: modelSchema(),
        type: {
            type: String,
            enum: {
                values: [
                    'appAnnualBudget',
                    'auditedAnnualFySt',
                    'auditReprtDate',
                    'ownRevDetails',
                    'ownRevenAmt',
                    'propertyDetails',
                    'totalRcptActl',
                    'totalRcptWaterSupply',
                    'totalRcptSanitation',
                    'totalRcptBudget',
                    'totalOwnRvnue',
                    'totalProperty',
                    'totalTaxRevWaterSupply',
                    'taxRevenue',
                    'drainageTax',
                    'waterTax',
                    'profTax',
                    'entertainTax',
                    'advTax',
                    'otherTaxRev',
                    'feeUserChrg',
                    'waterSupplyFee',
                    'sanitationFee',
                    'garbageFee',
                    'otherFee',
                    'rentInc',
                    'assignedCompensation',
                    'octroiCompensation',
                    'otherCompensation',
                    'revGrants',
                    'centralGrant',
                    'faLandBuild',
                    'faOther',
                    'debtOs',
                    'assetsSale',
                    'incmLandSale',
                    'incmOtherAssets',
                    'cfcGrant',
                    'cssGrant',
                    'centralscheme',
                    'centralTransfer',
                    'stateGrant',
                    'sfcGrant',
                    'stateScheme',
                    'otherStateTrans',
                    'otherGrant',
                    'otherIncome',
                    'totalIncome',
                    'establishExpense',
                    'categoryA',
                    'categoryB',
                    'categoryC',
                    'otherEstExpense',
                    'adminExpense',
                    'totalTaxRevSanitation',
                    'totalFeeChrgWaterSupply',
                    'totalFeeChrgSanitation',
                    'totalCaptlExp',
                    'totalCaptlExpWaterSupply',
                    'fixedAsset',
                    'CaptExpOther',
                    'totalCaptlExpSanitation',
                    'totalOmExp',
                    'totalOMCaptlExpWaterSupply',
                    'totalOMCaptlExpSanitation',
                    'totalRevExp',
                    'finExpense',
                    'misExpense',
                    'otherExpense',
                    'totalExpend',
                    'grossBeforePrior',
                    'priorItems',
                    'reservFunds',
                    'netBal',
                    'otherDetail',
                ],
                message: "ERROR: STATUS BE EITHER",
            },
        },
        file: {
            name: { type: String },
            url: { type: String }
        },
        typeofdata: {
            type: String,
            default: "Number",
            enum: {
                values: ["Number", "PDF", "Excel", "Date"],
                message: "ERROR: STATUS BE EITHER",
            },
        },
        createdAt: { type: Date, default: Date.now() },
        modifiedAt: { type: Date, default: Date.now() },
    },
    { timestamp: { createdAt: "createdAt", updatedAt: "modifiedAt" } }
);
module.exports = mongoose.model("FiscalRankingMapper", fiscalRankingMapperSchema);
