// Json structure.
let keyDetailsForm1 = {
    nameOfUlb: {
        class: '',
        formFieldType: 'text',
        key: 'nameOfUlb',
        displayPriority: '1',
        quesPos: 1,
        validations: [],
        label: 'Name of ULB',
        info: '',
        required: true,
        year: 1,
        autoSumValidation: '',
        logic: '',
        min: "",
        max: "",
        decimal: ""
    },
    nameOfState: {
        class: '',
        formFieldType: 'text',
        key: 'nameOfState',
        displayPriority: '2',
        quesPos: 2,
        validations: [],
        label: 'Name of State/Union Territory ',
        info: '',
        required: true,
        year: 1,
        autoSumValidation: '',
        logic: '',
        min: "",
        max: "",
        decimal: ""
    },
    pop2011: {
        class: '',
        formFieldType: 'number',
        key: 'pop2011',
        displayPriority: '3',
        quesPos: 3,
        validations: [],
        label: 'Population as per Census 2011',
        info: '',
        required: true,
        year: 1,
        autoSumValidation: '',
        logic: '',
        min: 0,
        max: 100000000,
        decimal: 0
    },
    popApril2024: {
        class: '',
        formFieldType: 'number',
        key: 'popApril2024',
        displayPriority: '4',
        quesPos: 4,
        validations: [],
        label: 'Population as per 01 April 2024',
        info: '',
        required: true,
        year: 1,
        autoSumValidation: '',
        logic: '',
        min: 0,
        max: 100000000,
        decimal: 0
    },
    areaOfUlb: {
        class: '',
        formFieldType: 'number',
        key: 'areaOfUlb',
        displayPriority: '5',
        quesPos: 5,
        validations: [],
        label: 'Area of the ULB (in Sq. Km.)',
        info: '',
        required: true,
        year: 1,
        autoSumValidation: '',
        logic: '',
        min: 0.1,
        max: 1000,
        decimal: 2
    },
    yearOfElection: {
        class: '',
        formFieldType: 'dropdown',
        options: ["2023-24", "2022-23", "2021-22", "2020-21", "2019-20", "2018-19", "2017-18", "2016-17", "2015-16", "Before 2015-16"],
        showInputBox: "",
        key: 'yearOfElection',
        displayPriority: '6',
        quesPos: 6,
        validations: [],
        label: "Which is the latest year when ULB's election was held?",
        info: '',
        required: true,
        year: 1,
        autoSumValidation: '',
        logic: '',
        min: "",
        max: "",
        decimal: ""
    },
    isElected: {
        class: '',
        formFieldType: 'radio',
        options: ['Yes', 'No'],
        key: 'isElected',
        displayPriority: '7',
        quesPos: 7,
        validations: [],
        label: 'Is the elected body in place as on 01 April 2024?',
        info: '',
        required: true,
        year: 1,
        autoSumValidation: '',
        logic: '',
        min: "",
        max: "",
        decimal: ""
    },
    yearOfConstitution: {
        class: '',
        formFieldType: 'dropdown',
        options: ["2023-34", "2022-23", "2021-22", "2020-21", "2019-20", "2018-19", "2017-18", "2016-17", "In 2015-16", "Before 2015-16"],
        showInputBox: "",
        key: 'yearOfConstitution',
        displayPriority: '8',
        quesPos: 8,
        validations: [],
        label: 'In which year was the ULB constituted?',
        info: '',
        required: true,
        year: 1,
        autoSumValidation: '',
        logic: '',
        min: "",
        max: "",
        decimal: ""
    },
    sourceOfFd: {
        class: '',
        formFieldType: 'dropdown',
        options: ["Accounts Finalized & Audited", "Accounts Finalized but Not Audited", "Accounts not Finalized - Provisional data"],
        showInputBox: "",
        key: 'sourceOfFd',
        displayPriority: '',
        quesPos: 10,
        validations: [],
        label: 'Please select the source of Financial Data',
        info: '',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: "",
        max: "",
        decimal: ""
    },
    taxRevenue: {
        class: '',
        formFieldType: 'amount',
        key: 'taxRevenue',
        displayPriority: '1.1',
        quesPos: 12,
        validations: [],
        label: 'Tax Revenue',
        info: 'Tax revenue shall include property, water, drainage, sewerage,professional, entertainment and advertisment tax and all other tax revenues.',
        required: true,
        year: 8,
        autoSumValidation: '',
        // autoSumValidation2: 'sum',
        sumOf: '',
        // sumOf2: ['pTax', 'otherTax'],
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    feeAndUserCharges: {
        class: '',
        formFieldType: 'amount',
        key: 'feeAndUserCharges',
        displayPriority: '1.2',
        quesPos: 16,
        validations: [],
        label: 'Fee and User Charges',
        info: 'Fees & user charges shall include Water supply, Fees & Sanitation / Sewerage, Garbage collection / Solid waste management, and all other fees & user charges.',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    interestIncome: {
        class: '',
        formFieldType: 'amount',
        key: 'interestIncome',
        displayPriority: '1.3',
        quesPos: 17,
        validations: [],
        label: 'Interest Income',
        info: 'Interest income shall include sale from assets, land and other assets.',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    otherIncome: {
        class: '',
        formFieldType: 'amount',
        key: 'otherIncome',
        displayPriority: '1.4',
        quesPos: 18,
        validations: [],
        label: 'Other Income',
        info: 'Other income shall include sale & hire charges, income from investments,interest earned, etc.',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    totOwnRevenue: {
        class: '',
        formFieldType: 'amount',
        key: 'totOwnRevenue',
        displayPriority: '1',
        quesPos: 11,
        validations: [],
        label: 'Total Own Revenue',
        info: 'Total own revenue shall include tax revenue, fees & user charges, interest income, and other income.',
        required: true,
        year: 8,
        autoSumValidation: 'sum',
        sumOf: ['taxRevenue', 'feeAndUserCharges', 'interestIncome', 'otherIncome'],
        // sumOf2: ['taxRevenue', 'feeAndUserCharges', 'interestIncome', 'otherIncome', 'rentalIncome'],
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    centralGrants: {
        class: '',
        formFieldType: 'amount',
        key: 'centralGrants',
        displayPriority: '2.1',
        quesPos: 21,
        validations: [],
        label: "Grants for Centre's Initiatives ",
        info: "These grants shall include Union Finance Commission grants, Grants received for Centrally Sponsored Schemes (including state's matching share).",
        required: true,
        year: 8,
        autoSumValidation: '',
        // autoSumValidation2: 'sum',
        sumOf: [],
        // sumOf2: ['centralSponsoredScheme', 'unionFinanceGrants'],
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    otherGrants: {
        class: '',
        formFieldType: 'amount',
        key: 'otherGrants',
        displayPriority: '2.2',
        quesPos: 24,
        validations: [],
        label: "Other Grants (including State's grants)",
        info: 'These grants shall include State Finance Commission grants, Other State ,Grants, Other grants etc.',
        required: true,
        year: 8,
        autoSumValidation: '',
        // autoSumValidation2: 'sum',
        sumOf: [],
        // sumOf2: ['sfcGrants', 'grantsOtherThanSfc', 'grantsWithoutState'],
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    totalGrants: {
        class: '',
        formFieldType: 'amount',
        key: 'totalGrants',
        displayPriority: '2',
        quesPos: 20,
        validations: [],
        label: 'Total Grants',
        info: '',
        required: true,
        year: 8,
        autoSumValidation: 'sum',
        sumOf: ['centralGrants', 'otherGrants'],
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    assignedRevAndCom: {
        class: '',
        formFieldType: 'amount',
        key: 'assignedRevAndCom',
        displayPriority: '3',
        quesPos: 28,
        validations: [],
        label: 'Assigned Revenue and Compensation',
        info: 'Assigned Revenue includes share in the revenues of the state government ,allocated to the ULB. This includes Entertainment Tax, Duty on Transfer of Properties,etc.',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    otherRevenue: {
        class: '',
        formFieldType: 'amount',
        key: 'otherRevenue',
        displayPriority: '4',
        quesPos: 29,
        validations: [],
        label: 'Other Revenue',
        info: 'Other Revenue shall include any other sources of revenue except own ,revenue, assigned revenue and grants',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    totalRevenue: {
        class: '',
        formFieldType: 'amount',
        key: 'totalRevenue',
        displayPriority: '5',
        quesPos: 30,
        validations: [],
        label: 'Total Revenues',
        info: 'Total Revenue is the sum of: (a) tax revenues, (b) non-tax revenues, (c) assigned (shared) revenue, (c) grants-in-aid, (d) other receipts, etc.',
        required: true,
        year: 8,
        autoSumValidation: 'sum',
        sumOf: ['totOwnRevenue', 'totalGrants', 'assignedRevAndCom', 'otherRevenue'],
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    establishmentExp: {
        class: '',
        formFieldType: 'amount',
        key: 'establishmentExp',
        displayPriority: '6.1',
        quesPos: 33,
        validations: [],
        label: 'Establishment Expenses',
        info: 'Expenses directly incurred on human resources of the ULB such as ,wages, and employee benefits such as retirement and pensions are called establishment expenses',
        required: true,
        year: 8,
        autoSumValidation: '',
        // autoSumValidation2: 'sum',
        sumOf: ['salaries', 'pension', 'otherExp'],
        // sumOf2: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    oAndmExp: {
        class: '',
        formFieldType: 'amount',
        key: 'oAndmExp',
        displayPriority: '6.2',
        quesPos: 36,
        validations: [],
        label: 'Operation and Maintenance Expenditure',
        info: 'Operation and Maintenance Expenditure shall include O&M expense on water supply + O&M expense on sanitation / sewerage + All other O&M expenses.',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    interestAndfinacialChar: {
        class: '',
        formFieldType: 'amount',
        key: 'interestAndfinacialChar',
        displayPriority: '6.3',
        quesPos: 37,
        validations: [],
        label: 'Interest and Finance Charges',
        info: 'Interest and Finance Charges shall include Interest on Loans from Central Govt, State Govt, International agencies, govt bodies, banks, bank charges and other financial expenses, etc.',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    otherRevenueExp: {
        class: '',
        formFieldType: 'amount',
        key: 'otherRevenueExp',
        displayPriority: '6.4',
        quesPos: 38,
        validations: [],
        label: 'Other Revenue Expenditure',
        info: 'Other expenses shall include programme expenses, revenue grants, contributions & subsidies.',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    totalRevenueExp: {
        class: '',
        formFieldType: 'amount',
        key: 'totalRevenueExp',
        displayPriority: '6',
        quesPos: 31,
        validations: [],
        label: 'Total Revenue Expenditure',
        info: 'Total expenditure shall include establishment expenses, operations & maintenance + interest & finance charges and other expenditure.',
        required: true,
        year: 8,
        // autoSumValidation: 'sum',
        sumOf: ['establishmentExp', 'oAndmExp', 'interestAndfinacialChar', 'otherRevenueExp'],
        // sumOf2: ['establishmentExp', 'oAndmExp', 'interestAndfinacialChar', 'otherRevenueExp', 'adExp'],
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    capExp: {
        class: '',
        formFieldType: 'amount',
        key: 'capExp',
        displayPriority: '7',
        quesPos: 40,
        validations: [],
        label: 'Capital Expenditure',
        info: 'Capital Expenditure = (Closing Balance Gross Block + Closing Balance Capital Work in Progress) - (Opening Balance Gross Block + Opening Balance Capital Work in Progress)',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    totalExp: {
        class: '',
        formFieldType: 'amount',
        key: 'totalExp',
        displayPriority: '8',
        quesPos: 41,
        validations: [],
        label: 'Total Expenditure',
        info: 'Total Expenditure = Revenue Expenditure + Capital Expenditure',
        required: true,
        year: 8,
        autoSumValidation: 'sum',
        sumOf: ['totalRevenueExp', 'capExp'],
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    grossBorrowing: {
        class: '',
        formFieldType: 'amount',
        key: 'grossBorrowing',
        displayPriority: '9',
        quesPos: 42,
        validations: [],
        label: 'Gross Borrowings',
        info: 'Gross Borrowings = Sum of All Secured and Unsecured Loans',
        required: true,
        year: 8,
        autoSumValidation: '',
        // autoSumValidation2: 'sum',
        sumOf: [],
        // sumOf2: ['centralStateBorrow', 'bonds', 'bankAndFinancial', 'otherBorrowing'],
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    accSystem: {
        class: '',
        formFieldType: 'radio',
        options: [
            { id: 'Cash Basis of Accounting' },
            { id: 'Accrual Basis of Accounting' },
            { id: 'Modified Cash/ Accrual Accounting' },
        ],
        key: 'accSystem',
        displayPriority: '1',
        quesPos: 53,
        validations: [],
        label: 'What is the accounting system being followed by the ULB?',
        info: {
            "Cash basis of accounting": "Revenues and expenses are recognised/recorded when the related cash receipts or cash payments take place.",
            "Accrual basis of accounting": "Revenues and expneses are  recognised/recorded as they are earned or incurred (and not as money is received or paid) and recorded in the financial statements of the periods to which they relate.",
            "Modified": "Revenues are recognized/recorded when cash is received and expenses when they are paid, with the exception of capitalizing long-term assets and recording their related depreciation."
        },
        required: true,
        year: 1
    },
    accProvision: {
        class: '',
        formFieldType: 'radio',
        options: [
            { id: 'National Municipal Accounting Manual' },
            { id: 'State-specific Municipal Accounting Manual' },
            { id: 'Other (Please specify)', showInputBox: true, inputBoxValue: '' },
        ],
        key: 'accProvision',
        displayPriority: '2',
        quesPos: 54,
        validations: [],
        label: 'What accounting provisions or framework does the ULB follow?',
        info: '',
        required: true,
        year: 1
    },
    accInCashBasis: {
        class: '',
        formFieldType: 'radio',
        options: [
            { id: 'Yes (Please specify)', showInputBox: true, inputBoxValue: '' },
            { id: 'No' }
        ],
        key: 'accInCashBasis',
        displayPriority: '3',
        quesPos: 55,
        validations: [],
        label: 'Are there any accounts/books/registers maintained in cash basis?',
        info: 'Types of registers maintained: cash book, receipt register, register of bills for payment, collection register, deposit register, register of fixed assets etc.',
        required: true,
        year: 1
    },
    fsTransactionRecord: {
        class: '',
        formFieldType: 'radio',
        options: [
            { id: 'Yes' },
            { id: 'No' },
        ],
        key: 'fsTransactionRecord',
        displayPriority: '4',
        quesPos: 56,
        validations: [],
        label: 'Does the ULB initially record transactions on a cash basis and subsequently prepare accrual accounts for consolidation of financial statements?',
        info: '',
        required: true,
        year: 1
    },
    fsPreparedBy: {
        class: '',
        formFieldType: 'radio',
        options: [
            { id: 'Internally (by Accounts Department)' },
            { id: 'External Chartered Accountants' },
            { id: 'Both' },
        ],
        key: 'fsPreparedBy',
        displayPriority: '5',
        quesPos: 57,
        validations: [],
        label: "Are the Financial Statements prepared internally by the ULB's accounting department, or are they compiled by an external Chartered Accountant?",
        info: '',
        required: true,
        year: 1
    },
    revReceiptRecord: {
        class: '',
        formFieldType: 'radio',
        options: [
            { id: 'Recorded when cash is received' },
            { id: 'Recorded when they are accrued' },
            { id: 'Both (Please specify which transactions are recognised in accrual basis)', showInputBox: true, inputBoxValue: '' },
        ],
        key: 'revReceiptRecord',
        displayPriority: '6',
        quesPos: 58,
        validations: [],
        label: 'Is the revenue receipt recorded when the cash is received or when it is accrued/event occurs?',
        info: '',
        required: true,
        year: 1
    },
    expRecord: {
        class: '',
        formFieldType: 'radio',
        options: [
            { id: 'Recorded when cash is paid' },
            { id: 'Recorded when they are accrued' },
            { id: 'Both (Please specify which transactions are recognised in accrual basis)', showInputBox: true, inputBoxValue: '' },
        ],
        key: 'expRecord',
        displayPriority: '7',
        quesPos: 59,
        validations: [],
        label: 'Is the expense recorded when it is paid or when it is incurred/event occurs?',
        info: '',
        required: true,
        year: 1
    },
    accSoftware: {
        class: '',
        formFieldType: 'radio',
        options: [
            { id: 'Centralized system provided by the State' },
            { id: 'Standalone software' },
            { id: 'Tally' },
            { id: 'Other (Please specify)', showInputBox: true, inputBoxValue: '' },
            { id: 'None' }
        ],
        key: 'accSoftware',
        displayPriority: '8',
        quesPos: 60,
        validations: [],
        label: 'What accounting software is currently in use by the ULB?',
        info: '',
        required: true,
        year: 1
    },
    onlineAccSysIntegrate: {
        class: '',
        formFieldType: 'radio',
        options: [
            { id: 'Yes (Please specify which all system, e.g., tax collection, payroll, asset management)', showInputBox: true, inputBoxValue: '' },
            { id: 'No' },
        ],
        key: 'onlineAccSysIntegrate',
        displayPriority: '9',
        quesPos: 61,
        validations: [],
        label: 'Does the online accounting system integrate seamlessly with other municipal systems?',
        info: '',
        required: true,
        year: 1
    },
    muniAudit: {
        class: '',
        formFieldType: 'radio',
        options: [
            { id: 'External Chartered Accountant (CA)' },
            { id: 'State Audit Department' },
        ],
        key: 'muniAudit',
        displayPriority: '10',
        quesPos: 62,
        validations: [],
        label: 'Who does the municipal audit of financial statements ?',
        info: '',
        required: true,
        year: 1
    },
    totSanction: {
        class: '',
        formFieldType: 'number',
        key: 'totSanction',
        displayPriority: '11',
        quesPos: 63,
        validations: [],
        label: 'What is the total sanctioned posts for finance & accounts related positions?',
        info: '',
        required: true,
        year: 1,
        max: 9999,
        min: 0,
        decimal: 0,
        autoSumValidation: '',
        logic: '',
    },
    totVacancy: {
        class: '',
        formFieldType: 'number',
        key: 'totVacancy',
        displayPriority: '12',
        quesPos: 64,
        validations: [],
        label: 'What is the total vacancy across finance & accounts related positions?',
        info: '',
        required: true,
        year: 1,
        max: 9999,
        min: 0,
        decimal: 0,
        autoSumValidation: 'lessThan',
        logic: '11',
    },
    accPosition: {
        class: '',
        formFieldType: 'number',
        key: 'accPosition',
        displayPriority: '13',
        quesPos: 65,
        validations: [],
        label: 'How many finance & accounts related positions currently are filled on contractual basis or outsourced?',
        info: '',
        required: true,
        year: 1,
        max: 9999,
        min: 0,
        decimal: 0,
        autoSumValidation: '',
        logic: '',
    },
    auditedAnnualFySt: {
        instruction: [
            { "instruction": "Annual Financial Statement should include: Income and Expenditure Statement, Balance Sheet, Schedules to IES and BS, Auditor's Report and if available Receipts & Payments Statement." },
            { "instruction": " All documents pertaining to a specific financial year should be combined into a single PDF before uploading & should not exceed 20 MB." },
            { "instruction": "Please use the following format for naming the documents to be uploaded: nameofthedocument_FY_ULB Name. || Example: Annual accounts_15-16_Jaipur municipal corporation" },
        ],
        class: '',
        formFieldType: 'file',
        key: 'auditedAnnualFySt',
        displayPriority: '',
        quesPos: 52,
        validations: [],
        label: 'Copy of Audited Annual Financial Statements preferably in English',
        info: '',
        required: true,
        year: 8,
        max: 20,
        min: 0,
        decimal: 0
    },
}
let keyDetailsForm2 = {
    nameOfUlb: {
        class: '',
        formFieldType: 'text',
        key: 'nameOfUlb',
        displayPriority: '1',
        quesPos: 1,
        validations: [],
        label: 'Name of ULB',
        info: '',
        required: true,
        year: 1,
        autoSumValidation: '',
        logic: '',
        min: "",
        max: "",
        decimal: ""
    },
    nameOfState: {
        class: '',
        formFieldType: 'text',
        key: 'nameOfState',
        displayPriority: '2',
        quesPos: 2,
        validations: [],
        label: 'Name of State/Union Territory ',
        info: '',
        required: true,
        year: 1,
        autoSumValidation: '',
        logic: '',
        min: "",
        max: "",
        decimal: ""
    },
    pop2011: {
        class: '',
        formFieldType: 'number',
        key: 'pop2011',
        displayPriority: '3',
        quesPos: 3,
        validations: [],
        label: 'Population as per Census 2011',
        info: '',
        required: true,
        year: 1,
        autoSumValidation: '',
        logic: '',
        min: 0,
        max: 100000000,
        decimal: 0
    },
    popApril2024: {
        class: '',
        formFieldType: 'number',
        key: 'popApril2024',
        displayPriority: '4',
        quesPos: 4,
        validations: [],
        label: 'Population as per 01 April 2024',
        info: '',
        required: true,
        year: 1,
        autoSumValidation: '',
        logic: '',
        min: 0,
        max: 100000000,
        decimal: 0
    },
    areaOfUlb: {
        class: '',
        formFieldType: 'number',
        key: 'areaOfUlb',
        displayPriority: '5',
        quesPos: 5,
        validations: [],
        label: 'Area of the ULB (in Sq. Km.)',
        info: '',
        required: true,
        year: 1,
        autoSumValidation: '',
        logic: '',
        min: 0.1,
        max: 1000,
        decimal: 2
    },
    yearOfElection: {
        class: '',
        formFieldType: 'dropdown',
        options: ["2023-24", "2022-23", "2021-22", "2020-21", "2019-20", "2018-19", "2017-18", "2016-17", "2015-16", "Before 2015-16"],
        showInputBox: "",
        key: 'yearOfElection',
        displayPriority: '6',
        quesPos: 6,
        validations: [],
        label: "Which is the latest year when ULB's election was held?",
        info: '',
        required: true,
        year: 1,
        autoSumValidation: '',
        logic: '',
        min: "",
        max: "",
        decimal: ""
    },
    isElected: {
        class: '',
        formFieldType: 'radio',
        options: ['Yes', 'No'],
        key: 'isElected',
        displayPriority: '7',
        quesPos: 7,
        validations: [],
        label: 'Is the elected body in place as on 01 April 2024?',
        info: '',
        required: true,
        year: 1,
        autoSumValidation: '',
        logic: '',
        min: "",
        max: "",
        decimal: ""
    },
    yearOfConstitution: {
        class: '',
        formFieldType: 'dropdown',
        options: ["2023-34", "2022-23", "2021-22", "2020-21", "2019-20", "2018-19", "2017-18", "2016-17", "In 2015-16", "Before 2015-16"],
        showInputBox: "",
        key: 'yearOfConstitution',
        displayPriority: '8',
        quesPos: 8,
        validations: [],
        label: 'In which year was the ULB constituted?',
        info: '',
        required: true,
        year: 1,
        autoSumValidation: '',
        logic: '',
        min: "",
        max: "",
        decimal: ""
    },
    sourceOfFd: {
        class: '',
        formFieldType: 'dropdown',
        options: ["Accounts Finalized & Audited", "Accounts Finalized but Not Audited", "Accounts not Finalized - Provisional data"],
        showInputBox: "",
        key: 'sourceOfFd',
        displayPriority: '',
        quesPos: 10,
        validations: [],
        label: 'Please select the source of Financial Data',
        info: '',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: "",
        max: "",
        decimal: ""
    },
    taxRevenue: {
        class: '',
        formFieldType: 'amount',
        key: 'taxRevenue',
        displayPriority: '1.1',
        quesPos: 12,
        validations: [],
        label: 'Tax Revenue',
        info: 'Tax revenue shall include property, water, drainage, sewerage,professional, entertainment and advertisment tax and all other tax revenues.',
        required: true,
        year: 8,
        // autoSumValidation: '',
        autoSumValidation: 'sum',
        // sumOf: '',
        sumOf: ['pTax', 'otherTax'],
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    feeAndUserCharges: {
        class: '',
        formFieldType: 'amount',
        key: 'feeAndUserCharges',
        displayPriority: '1.2',
        quesPos: 16,
        validations: [],
        label: 'Fee and User Charges',
        info: 'Fees & user charges shall include Water supply, Fees & Sanitation / Sewerage, Garbage collection / Solid waste management, and all other fees & user charges.',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    interestIncome: {
        class: '',
        formFieldType: 'amount',
        key: 'interestIncome',
        displayPriority: '1.3',
        quesPos: 17,
        validations: [],
        label: 'Interest Income',
        info: 'Interest income shall include sale from assets, land and other assets.',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    otherIncome: {
        class: '',
        formFieldType: 'amount',
        key: 'otherIncome',
        displayPriority: '1.4',
        quesPos: 18,
        validations: [],
        label: 'Other Income',
        info: 'Other income shall include sale & hire charges, income from investments,interest earned, etc.',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    totOwnRevenue: {
        class: '',
        formFieldType: 'amount',
        key: 'totOwnRevenue',
        displayPriority: '1',
        quesPos: 11,
        validations: [],
        label: 'Total Own Revenue',
        info: 'Total own revenue shall include tax revenue, fees & user charges, interest income, and other income.',
        required: true,
        year: 8,
        autoSumValidation: 'sum',
        // sumOf: ['taxRevenue', 'feeAndUserCharges', 'interestIncome', 'otherIncome'],
        sumOf: ['taxRevenue', 'feeAndUserCharges', 'interestIncome', 'otherIncome', 'rentalIncome'],
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    centralGrants: {
        class: '',
        formFieldType: 'amount',
        key: 'centralGrants',
        displayPriority: '2.1',
        quesPos: 21,
        validations: [],
        label: "Grants for Centre's Initiatives ",
        info: "These grants shall include Union Finance Commission grants, Grants received for Centrally Sponsored Schemes (including state's matching share).",
        required: true,
        year: 8,
        // autoSumValidation: '',
        autoSumValidation: 'sum',
        // sumOf: [],
        sumOf: ['centralSponsoredScheme', 'unionFinanceGrants'],
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    otherGrants: {
        class: '',
        formFieldType: 'amount',
        key: 'otherGrants',
        displayPriority: '2.2',
        quesPos: 24,
        validations: [],
        label: "Other Grants (including State's grants)",
        info: 'These grants shall include State Finance Commission grants, Other State ,Grants, Other grants etc.',
        required: true,
        year: 8,
        // autoSumValidation: '',
        autoSumValidation: 'sum',
        // sumOf: [],
        sumOf: ['sfcGrants', 'grantsOtherThanSfc', 'grantsWithoutState'],
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    totalGrants: {
        class: '',
        formFieldType: 'amount',
        key: 'totalGrants',
        displayPriority: '2',
        quesPos: 20,
        validations: [],
        label: 'Total Grants',
        info: '',
        required: true,
        year: 8,
        autoSumValidation: 'sum',
        sumOf: ['centralGrants', 'otherGrants'],
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    assignedRevAndCom: {
        class: '',
        formFieldType: 'amount',
        key: 'assignedRevAndCom',
        displayPriority: '3',
        quesPos: 28,
        validations: [],
        label: 'Assigned Revenue and Compensation',
        info: 'Assigned Revenue includes share in the revenues of the state government ,allocated to the ULB. This includes Entertainment Tax, Duty on Transfer of Properties,etc.',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    otherRevenue: {
        class: '',
        formFieldType: 'amount',
        key: 'otherRevenue',
        displayPriority: '4',
        quesPos: 29,
        validations: [],
        label: 'Other Revenue',
        info: 'Other Revenue shall include any other sources of revenue except own ,revenue, assigned revenue and grants',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    totalRevenue: {
        class: '',
        formFieldType: 'amount',
        key: 'totalRevenue',
        displayPriority: '5',
        quesPos: 30,
        validations: [],
        label: 'Total Revenues',
        info: 'Total Revenue is the sum of: (a) tax revenues, (b) non-tax revenues, (c) assigned (shared) revenue, (c) grants-in-aid, (d) other receipts, etc.',
        required: true,
        year: 8,
        autoSumValidation: 'sum',
        sumOf: ['totOwnRevenue', 'totalGrants', 'assignedRevAndCom', 'otherRevenue'],
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    establishmentExp: {
        class: '',
        formFieldType: 'amount',
        key: 'establishmentExp',
        displayPriority: '6.1',
        quesPos: 33,
        validations: [],
        label: 'Establishment Expenses',
        info: 'Expenses directly incurred on human resources of the ULB such as ,wages, and employee benefits such as retirement and pensions are called establishment expenses',
        required: true,
        year: 8,
        autoSumValidation: '',
        autoSumValidation2: 'sum',
        sumOf: ['salaries', 'pension', 'otherExp'],
        // sumOf2: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    oAndmExp: {
        class: '',
        formFieldType: 'amount',
        key: 'oAndmExp',
        displayPriority: '6.2',
        quesPos: 36,
        validations: [],
        label: 'Operation and Maintenance Expenditure',
        info: 'Operation and Maintenance Expenditure shall include O&M expense on water supply + O&M expense on sanitation / sewerage + All other O&M expenses.',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    interestAndfinacialChar: {
        class: '',
        formFieldType: 'amount',
        key: 'interestAndfinacialChar',
        displayPriority: '6.3',
        quesPos: 37,
        validations: [],
        label: 'Interest and Finance Charges',
        info: 'Interest and Finance Charges shall include Interest on Loans from Central Govt, State Govt, International agencies, govt bodies, banks, bank charges and other financial expenses, etc.',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    otherRevenueExp: {
        class: '',
        formFieldType: 'amount',
        key: 'otherRevenueExp',
        displayPriority: '6.4',
        quesPos: 38,
        validations: [],
        label: 'Other Revenue Expenditure',
        info: 'Other expenses shall include programme expenses, revenue grants, contributions & subsidies.',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    totalRevenueExp: {
        class: '',
        formFieldType: 'amount',
        key: 'totalRevenueExp',
        displayPriority: '6',
        quesPos: 31,
        validations: [],
        label: 'Total Revenue Expenditure',
        info: 'Total expenditure shall include establishment expenses, operations & maintenance + interest & finance charges and other expenditure.',
        required: true,
        year: 8,
        autoSumValidation: 'sum',
        // sumOf: ['establishmentExp', 'oAndmExp', 'interestAndfinacialChar', 'otherRevenueExp'],
        sumOf: ['establishmentExp', 'oAndmExp', 'interestAndfinacialChar', 'otherRevenueExp', 'adExp'],
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    capExp: {
        class: '',
        formFieldType: 'amount',
        key: 'capExp',
        displayPriority: '7',
        quesPos: 40,
        validations: [],
        label: 'Capital Expenditure',
        info: 'Capital Expenditure = (Closing Balance Gross Block + Closing Balance Capital Work in Progress) - (Opening Balance Gross Block + Opening Balance Capital Work in Progress)',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    totalExp: {
        class: '',
        formFieldType: 'amount',
        key: 'totalExp',
        displayPriority: '8',
        quesPos: 41,
        validations: [],
        label: 'Total Expenditure',
        info: 'Total Expenditure = Revenue Expenditure + Capital Expenditure',
        required: true,
        year: 8,
        autoSumValidation: 'sum',
        sumOf: ['totalRevenueExp', 'capExp'],
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    grossBorrowing: {
        class: '',
        formFieldType: 'amount',
        key: 'grossBorrowing',
        displayPriority: '9',
        quesPos: 42,
        validations: [],
        label: 'Gross Borrowings',
        info: 'Gross Borrowings = Sum of All Secured and Unsecured Loans',
        required: true,
        year: 8,
        // autoSumValidation: '',
        autoSumValidation: 'sum',
        // sumOf: [],
        sumOf: ['centralStateBorrow', 'bonds', 'bankAndFinancial', 'otherBorrowing'],
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    accSystem: {
        class: '',
        formFieldType: 'radio',
        options: [
            { id: 'Cash Basis of Accounting' },
            { id: 'Accrual Basis of Accounting' },
            { id: 'Modified Cash/ Accrual Accounting' },
        ],
        key: 'accSystem',
        displayPriority: '1',
        quesPos: 53,
        validations: [],
        label: 'What is the accounting system being followed by the ULB?',
        info: {
            "Cash basis of accounting": "Revenues and expenses are recognised/recorded when the related cash receipts or cash payments take place.",
            "Accrual basis of accounting": "Revenues and expneses are  recognised/recorded as they are earned or incurred (and not as money is received or paid) and recorded in the financial statements of the periods to which they relate.",
            "Modified": "Revenues are recognized/recorded when cash is received and expenses when they are paid, with the exception of capitalizing long-term assets and recording their related depreciation."
        },
        required: true,
        year: 1
    },
    accProvision: {
        class: '',
        formFieldType: 'radio',
        options: [
            { id: 'National Municipal Accounting Manual' },
            { id: 'State-specific Municipal Accounting Manual' },
            { id: 'Other (Please specify)', showInputBox: true, inputBoxValue: '' },
        ],
        key: 'accProvision',
        displayPriority: '2',
        quesPos: 54,
        validations: [],
        label: 'What accounting provisions or framework does the ULB follow?',
        info: '',
        required: true,
        year: 1
    },
    accInCashBasis: {
        class: '',
        formFieldType: 'radio',
        options: [
            { id: 'Yes (Please specify)', showInputBox: true, inputBoxValue: '' },
            { id: 'No' }
        ],
        key: 'accInCashBasis',
        displayPriority: '3',
        quesPos: 55,
        validations: [],
        label: 'Are there any accounts/books/registers maintained in cash basis?',
        info: 'Types of registers maintained: cash book, receipt register, register of bills for payment, collection register, deposit register, register of fixed assets etc.',
        required: true,
        year: 1
    },
    fsTransactionRecord: {
        class: '',
        formFieldType: 'radio',
        options: [
            { id: 'Yes' },
            { id: 'No' },
        ],
        key: 'fsTransactionRecord',
        displayPriority: '4',
        quesPos: 56,
        validations: [],
        label: 'Does the ULB initially record transactions on a cash basis and subsequently prepare accrual accounts for consolidation of financial statements?',
        info: '',
        required: true,
        year: 1
    },
    fsPreparedBy: {
        class: '',
        formFieldType: 'radio',
        options: [
            { id: 'Internally (by Accounts Department)' },
            { id: 'External Chartered Accountants' },
            { id: 'Both' },
        ],
        key: 'fsPreparedBy',
        displayPriority: '5',
        quesPos: 57,
        validations: [],
        label: "Are the Financial Statements prepared internally by the ULB's accounting department, or are they compiled by an external Chartered Accountant?",
        info: '',
        required: true,
        year: 1
    },
    revReceiptRecord: {
        class: '',
        formFieldType: 'radio',
        options: [
            { id: 'Recorded when cash is received' },
            { id: 'Recorded when they are accrued' },
            { id: 'Both (Please specify which transactions are recognised in accrual basis)', showInputBox: true, inputBoxValue: '' },
        ],
        key: 'revReceiptRecord',
        displayPriority: '6',
        quesPos: 58,
        validations: [],
        label: 'Is the revenue receipt recorded when the cash is received or when it is accrued/event occurs?',
        info: '',
        required: true,
        year: 1
    },
    expRecord: {
        class: '',
        formFieldType: 'radio',
        options: [
            { id: 'Recorded when cash is paid' },
            { id: 'Recorded when they are accrued' },
            { id: 'Both (Please specify which transactions are recognised in accrual basis)', showInputBox: true, inputBoxValue: '' },
        ],
        key: 'expRecord',
        displayPriority: '7',
        quesPos: 59,
        validations: [],
        label: 'Is the expense recorded when it is paid or when it is incurred/event occurs?',
        info: '',
        required: true,
        year: 1
    },
    accSoftware: {
        class: '',
        formFieldType: 'radio',
        options: [
            { id: 'Centralized system provided by the State' },
            { id: 'Standalone software' },
            { id: 'Tally' },
            { id: 'Other (Please specify)', showInputBox: true, inputBoxValue: '' },
            { id: 'None' }
        ],
        key: 'accSoftware',
        displayPriority: '8',
        quesPos: 60,
        validations: [],
        label: 'What accounting software is currently in use by the ULB?',
        info: '',
        required: true,
        year: 1
    },
    onlineAccSysIntegrate: {
        class: '',
        formFieldType: 'radio',
        options: [
            { id: 'Yes (Please specify which all system, e.g., tax collection, payroll, asset management)', showInputBox: true, inputBoxValue: '' },
            { id: 'No' },
        ],
        key: 'onlineAccSysIntegrate',
        displayPriority: '9',
        quesPos: 61,
        validations: [],
        label: 'Does the online accounting system integrate seamlessly with other municipal systems?',
        info: '',
        required: true,
        year: 1
    },
    muniAudit: {
        class: '',
        formFieldType: 'radio',
        options: [
            { id: 'External Chartered Accountant (CA)' },
            { id: 'State Audit Department' },
        ],
        key: 'muniAudit',
        displayPriority: '10',
        quesPos: 62,
        validations: [],
        label: 'Who does the municipal audit of financial statements ?',
        info: '',
        required: true,
        year: 1
    },
    totSanction: {
        class: '',
        formFieldType: 'number',
        key: 'totSanction',
        displayPriority: '11',
        quesPos: 63,
        validations: [],
        label: 'What is the total sanctioned posts for finance & accounts related positions?',
        info: '',
        required: true,
        year: 1,
        max: 9999,
        min: 0,
        decimal: 0,
        autoSumValidation: '',
        logic: '',
    },
    totVacancy: {
        class: '',
        formFieldType: 'number',
        key: 'totVacancy',
        displayPriority: '12',
        quesPos: 64,
        validations: [],
        label: 'What is the total vacancy across finance & accounts related positions?',
        info: '',
        required: true,
        year: 1,
        max: 9999,
        min: 0,
        decimal: 0,
        autoSumValidation: 'lessThan',
        logic: '11',
    },
    accPosition: {
        class: '',
        formFieldType: 'number',
        key: 'accPosition',
        displayPriority: '13',
        quesPos: 65,
        validations: [],
        label: 'How many finance & accounts related positions currently are filled on contractual basis or outsourced?',
        info: '',
        required: true,
        year: 1,
        max: 9999,
        min: 0,
        decimal: 0,
        autoSumValidation: '',
        logic: '',
    },
    auditedAnnualFySt: {
        instruction: [
            { "instruction": "Annual Financial Statement should include: Income and Expenditure Statement, Balance Sheet, Schedules to IES and BS, Auditor's Report and if available Receipts & Payments Statement." },
            { "instruction": " All documents pertaining to a specific financial year should be combined into a single PDF before uploading & should not exceed 20 MB." },
            { "instruction": "Please use the following format for naming the documents to be uploaded: nameofthedocument_FY_ULB Name. || Example: Annual accounts_15-16_Jaipur municipal corporation" },
        ],
        class: '',
        formFieldType: 'file',
        key: 'auditedAnnualFySt',
        displayPriority: '',
        quesPos: 52,
        validations: [],
        label: 'Copy of Audited Annual Financial Statements preferably in English',
        info: '',
        required: true,
        year: 8,
        max: 20,
        min: 0,
        decimal: 0
    },



    yearOfSlb: {
        class: '',
        formFieldType: 'dropdown',
        options: ["2023-24", "2022-23", "2021-22", "2020-21", "2019-20", "2018-19", "2017-18", "2016-17", "2015-16"],
        showInputBox: "",
        key: 'yearOfSlb',
        displayPriority: '9',
        quesPos: 9,
        validations: [],
        label: 'From which year is Service Level Benchmark data available?',
        info: '',
        required: true,
        year: 1,
        autoSumValidation: '',
        logic: '',
        min: "",
        max: "",
        decimal: ""
    },
    pTax: {
        class: '',
        formFieldType: 'amount',
        key: 'pTax',
        displayPriority: '1.1.1',
        quesPos: 13,
        validations: [],
        label: 'Property Tax',
        info: 'Property tax shall include only proprty tax levied on residential and commercial properties',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    noOfRegiProperty: {
        class: '',
        formFieldType: 'number',
        key: 'noOfRegiProperty',
        displayPriority: '1.1.2',
        quesPos: 14,
        validations: [],
        label: 'Number of registered properties',
        info: '',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: 0,
        max: 0,
        decimal: 0
    },
    otherTax: {
        class: '',
        formFieldType: 'amount',
        key: 'otherTax',
        displayPriority: '1.1.3',
        quesPos: 15,
        validations: [],
        label: 'Other Tax',
        info: 'Other Tax shall include any tax other than property tax levied by the ULB',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    rentalIncome: {
        class: '',
        formFieldType: 'amount',
        key: 'rentalIncome',
        displayPriority: '1.5',
        quesPos: 19,
        validations: [],
        label: 'Rental Income from Municipal Properties',
        info: 'Rental Income shall include rental incomes earned out of shopping complexes, markets, office buildings, etc',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    centralSponsoredScheme: {
        class: '',
        formFieldType: 'amount',
        key: 'centralSponsoredScheme',
        displayPriority: '2.1.1',
        quesPos: 22,
        validations: [],
        label: "Centrally Sponsored Schemes (Total Centre and State Share)",
        info: "Centrally Sponsored Scheme shall include  Grants received for Centrally Sponsored Schemes (including state's matching share)",
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    unionFinanceGrants: {
        class: '',
        formFieldType: 'amount',
        key: 'unionFinanceGrants',
        displayPriority: '2.1.2',
        quesPos: 23,
        validations: [],
        label: "Union Finance Commission Grants",
        info: "Union Finance Commission Grants shall include Union Finance Commission grants",
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    sfcGrants: {
        class: '',
        formFieldType: 'amount',
        key: 'sfcGrants',
        displayPriority: '2.2.1',
        quesPos: 25,
        validations: [],
        label: "State Finance Commission Devolution and Grants",
        info: "State Finance Commission Devolution and Grants shall include State Finance Commission grants",
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    grantsOtherThanSfc: {
        class: '',
        formFieldType: 'amount',
        key: 'grantsOtherThanSfc',
        displayPriority: '2.2.2',
        quesPos: 26,
        validations: [],
        label: "Grants from State (other than SFC)",
        info: "Grants from State shall include  Other State Grants (excluding State Finance Commission grants)",
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    grantsWithoutState: {
        class: '',
        formFieldType: 'amount',
        key: 'grantsWithoutState',
        displayPriority: '2.2.3',
        quesPos: 27,
        validations: [],
        label: "Other grants",
        info: "Other Grants shall include any other grants received by the ULB",
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    salaries: {
        class: '',
        formFieldType: 'amount',
        key: 'salaries',
        displayPriority: '6.1.1',
        quesPos: 33,
        validations: [],
        label: 'Salaries, Bonus and Wages',
        info: 'Salaries, Bonus & Wages shall include expenses directly incurred on human resources of the ULB such as wages, salaries and bonus',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    pension: {
        class: '',
        formFieldType: 'amount',
        key: 'pension',
        displayPriority: '6.1.2',
        quesPos: 34,
        validations: [],
        label: 'Pension',
        info: 'Pension shall include expenses directly incurred on human resources of the ULB such as pension',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    otherExp: {
        class: '',
        formFieldType: 'amount',
        key: 'otherExp',
        displayPriority: '6.1.3',
        quesPos: 35,
        validations: [],
        label: 'Others',
        info: 'Others shall include any other expenses directly incurred on human resources of the ULB',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    adExp: {
        class: '',
        formFieldType: 'amount',
        key: 'adExp',
        displayPriority: '6.5',
        quesPos: 39,
        validations: [],
        label: 'Administrative Expenses',
        info: 'Administrative Expenses shall include Indirect expenses  which relate to the ULB as a whole, such as Rents, Rates & Taxes, Office maintenance, Communications, Books & periodicals, Printing & Stationary, Travel Expenditure, Law Charges etc. ',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: 0
    },
    centralStateBorrow: {
        class: '',
        formFieldType: 'amount',
        key: 'centralStateBorrow',
        displayPriority: '9.1',
        quesPos: 43,
        validations: [],
        label: 'Central and State Government',
        info: 'Central and State Government includes the sum of All Secured and Unsecured Loans from Central and State Government',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: ''
    },
    bonds: {
        class: '',
        formFieldType: 'amount',
        key: 'bonds',
        displayPriority: '9.2',
        quesPos: 44,
        validations: [],
        label: 'Bonds',
        info: 'Bonds includes the sum of bond amounts issued by the ULB',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: ''
    },
    bankAndFinancial: {
        class: '',
        formFieldType: 'amount',
        key: 'bankAndFinancial',
        displayPriority: '9.3',
        quesPos: 45,
        validations: [],
        label: 'Banks and Financial Institutions',
        info: 'Banks and Financial Institutions includes the sum of all secured and Unsecured Loans from banks and other financial institution',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: ''
    },
    otherBorrowing: {
        class: '',
        formFieldType: 'amount',
        key: 'otherBorrowing',
        displayPriority: '9.4',
        quesPos: 46,
        validations: [],
        label: 'Others',
        info: 'Others includes the sum of all other types of loans',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: ''
    },
    receivablePTax: {
        class: '',
        formFieldType: 'amount',
        key: 'receivablePTax',
        displayPriority: '10.1',
        quesPos: 48,
        validations: [],
        label: 'Receivables for Property Tax',
        info: 'Receivables for Property Tax includes total amounts due towards property taxes',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: ''
    },
    receivableFee: {
        class: '',
        formFieldType: 'amount',
        key: 'receivableFee',
        displayPriority: '10.2',
        quesPos: 49,
        validations: [],
        label: 'Receivables for Fee and User Charges',
        info: 'Receivables for Fee and User Chargesincludes total amounts due towards fee and user charges',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: ''
    },
    otherReceivable: {
        class: '',
        formFieldType: 'amount',
        key: 'otherReceivable',
        displayPriority: '10.3',
        quesPos: 50,
        validations: [],
        label: 'Other Receivables',
        info: 'Other Receivables shall include any other amount due for taxes, goods sold or services rendered by ULB',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: ''
    },
    totalReceivable: {
        class: '',
        formFieldType: 'amount',
        key: 'totalReceivable',
        displayPriority: '10',
        quesPos: 47,
        validations: [],
        label: 'Total Receivables',
        info: 'Total Receivables is the sum of total amounts due for taxes, goods sold or services rendered by ULB',
        required: true,
        year: 8,
        autoSumValidation: 'sum',
        sumOf: ['receivablePTax', 'receivableFee', 'otherReceivable'],
        min: -999999999999999,
        max: 999999999999999,
        decimal: ''
    },
    totalCashAndBankBal: {
        class: '',
        formFieldType: 'amount',
        key: 'totalCashAndBankBal',
        displayPriority: '11',
        quesPos: 51,
        validations: [],
        label: 'Total Cash and Bank Balance',
        info: 'Total Cash & Bank Balance shall include cash held by the ULB and any money held in any bank/post office by the ULB (including municipal fund, special fund and grant funds)',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: -999999999999999,
        max: 999999999999999,
        decimal: ''
    },
    coverageOfWs: {
        class: '',
        formFieldType: 'number',
        key: 'coverageOfWs',
        displayPriority: 1,
        quesPos: 66,
        validations: [],
        label: 'Coverage of water supply connections (%)',
        info: '',
        placeholder: 'Percent|Range(0-100)',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: 0,
        max: 100,
        decimal: 2,
    },
    perCapitaOfWs: {
        class: '',
        formFieldType: 'number',
        key: 'perCapitaOfWs',
        displayPriority: 2,
        quesPos: 67,
        validations: [],
        label: 'Per capita supply of water(lpcd)',
        info: '',
        placeholder: 'litres per capita per day (lpcd)|Range(0-999)',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: 0,
        max: 999,
        decimal: 2,
        warning: { "value": 135, "condition": "gt", "message": 'Please note that the entered value exceeds the threshold of 135 lpcd' }
    },
    extentOfMeteringWs: {
        class: '',
        formFieldType: 'number',
        key: 'extentOfMeteringWs',
        displayPriority: 3,
        quesPos: 68,
        validations: [],
        label: 'Extent of metering of water connections (%)',
        info: '',
        placeholder: 'Percent|Range(0-100)',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: 0,
        max: 100,
        decimal: 2,
    },
    extentOfNonRevenueWs: {
        class: '',
        formFieldType: 'number',
        key: 'extentOfNonRevenueWs',
        displayPriority: 4,
        quesPos: 69,
        validations: [],
        label: 'Extent of non-revenue water (NRW) (%)',
        info: '',
        placeholder: 'Percent|Range(0-100)',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: 0,
        max: 100,
        decimal: 2,
    },
    continuityOfWs: {
        class: '',
        formFieldType: 'number',
        key: 'continuityOfWs',
        displayPriority: 5,
        quesPos: 70,
        validations: [],
        label: 'Continuity of water supplied (hours)',
        info: '',
        placeholder: 'Hours per day|Range(0-24)',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: 0,
        max: 24,
        decimal: 0,
    },
    efficiencyInRedressalCustomerWs: {
        class: '',
        formFieldType: 'number',
        key: 'efficiencyInRedressalCustomerWs',
        displayPriority: 6,
        quesPos: 71,
        validations: [],
        label: 'Efficiency in redressal of customer complaints related to water supply (%)',
        info: '',
        placeholder: 'Percent|Range(0-100)',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: 0,
        max: 100,
        decimal: 2,
        warning: { "value": 80, "condition": "gt", "message": 'Please note that the entered value exceeds the threshold of 80 lpcd' }
    },
    qualityOfWs: {
        class: '',
        formFieldType: 'number',
        key: 'qualityOfWs',
        displayPriority: 7,
        quesPos: 72,
        validations: [],
        label: 'Quality of water supplied (%)',
        info: '',
        placeholder: 'Percent|Range(0-100)',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: 0,
        max: 100,
        decimal: 2,
    },
    costRecoveryInWs: {
        class: '',
        formFieldType: 'number',
        key: 'costRecoveryInWs',
        displayPriority: 8,
        quesPos: 73,
        validations: [],
        label: 'Cost recovery in water supply service (%)',
        info: '',
        placeholder: 'Percent|Range(0-100)',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: 0,
        max: 100,
        decimal: 2,
    },
    efficiencyInCollectionRelatedWs: {
        class: '',
        formFieldType: 'number',
        key: 'efficiencyInCollectionRelatedWs',
        displayPriority: 9,
        quesPos: 74,
        validations: [],
        label: 'Efficiency in collection of water supply-related charges (%)',
        info: '',
        placeholder: 'Percent|Range(0-100)',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: 0,
        max: 100,
        decimal: 2,
        warning: { "value": 90, "condition": "gt", "message": 'Please note that the entered value exceeds the threshold of 90 lpcd' }
    },
    coverageOfToiletsSew: {
        class: '',
        formFieldType: 'number',
        key: 'coverageOfToiletsSew',
        displayPriority: 10,
        quesPos: 75,
        validations: [],
        label: 'Coverage of toilets (%)',
        info: '',
        placeholder: 'Percent|Range(0-100)',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: 0,
        max: 100,
        decimal: 2,
    },
    coverageOfSewNet: {
        class: '',
        formFieldType: 'number',
        key: 'coverageOfSewNet',
        displayPriority: 11,
        quesPos: 76,
        validations: [],
        label: 'Coverage of sewerage network (%)',
        info: '',
        placeholder: 'Percent|Range(0-100)',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: 0,
        max: 100,
        decimal: 2,
    },
    collectionEfficiencySew: {
        class: '',
        formFieldType: 'number',
        key: 'collectionEfficiencySew',
        displayPriority: 12,
        quesPos: 77,
        validations: [],
        label: 'Collection efficiency of sewerage network (%)',
        info: '',
        placeholder: 'Percent|Range(0-100)',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: 0,
        max: 100,
        decimal: 2,
    },
    adequacyOfSew: {
        class: '',
        formFieldType: 'number',
        key: 'adequacyOfSew',
        displayPriority: 13,
        quesPos: 78,
        validations: [],
        label: 'Adequacy of sewerage treatment capacity (%)',
        info: '',
        placeholder: 'Percent|Range(0-100)',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: 0,
        max: 100,
        decimal: 2,
    },
    qualityOfSew: {
        class: '',
        formFieldType: 'number',
        key: 'qualityOfSew',
        displayPriority: 14,
        quesPos: 79,
        validations: [],
        label: 'Quality of sewerage treatment (%)',
        info: '',
        placeholder: 'Percent|Range(0-100)',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: 0,
        max: 100,
        decimal: 2,
    },
    extentOfReuseSew: {
        class: '',
        formFieldType: 'number',
        key: 'extentOfReuseSew',
        displayPriority: 15,
        quesPos: 80,
        validations: [],
        label: 'Extent of reuse and recycling of sewage (%)',
        info: '',
        placeholder: 'Percent|Range(0-100)',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: 0,
        max: 100,
        decimal: 2,
    },
    efficiencyInRedressalCustomerSew: {
        class: '',
        formFieldType: 'number',
        key: 'efficiencyInRedressalCustomerSew',
        displayPriority: 16,
        quesPos: 81,
        validations: [],
        label: 'Efficiency in redressal of customer complaints related to sewerage (%)',
        info: '',
        placeholder: 'Percent|Range(0-100)',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: 0,
        max: 100,
        decimal: 2,
    },
    extentOfCostWaterSew: {
        class: '',
        formFieldType: 'number',
        key: 'extentOfCostWaterSew',
        displayPriority: 17,
        quesPos: 82,
        validations: [],
        label: 'Extent of cost recovery in waste water management (%)',
        info: '',
        placeholder: 'Percent|Range(0-100)',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: 0,
        max: 100,
        decimal: 2,
    },
    efficiencyInCollectionSew: {
        class: '',
        formFieldType: 'number',
        key: 'efficiencyInCollectionSew',
        displayPriority: 18,
        quesPos: 83,
        validations: [],
        label: 'Efficiency in collection of sewage water charges (%)',
        info: '',
        placeholder: 'Percent|Range(0-100)',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: 0,
        max: 100,
        decimal: 2,
        warning: { "value": 90, "condition": "gt", "message": 'Please note that the entered value exceeds the threshold of 90 lpcd' }
    },
    householdLevelCoverageLevelSwm: {
        class: '',
        formFieldType: 'number',
        key: 'householdLevelCoverageLevelSwm',
        displayPriority: 19,
        quesPos: 84,
        validations: [],
        label: 'Household level coverage (%)',
        info: '',
        placeholder: 'Percent|Range(0-100)',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: 0,
        max: 100,
        decimal: 2,
    },
    efficiencyOfCollectionSwm: {
        class: '',
        formFieldType: 'number',
        key: 'efficiencyOfCollectionSwm',
        displayPriority: 20,
        quesPos: 85,
        validations: [],
        label: 'Efficiency of collection of municipal solid waste (%)',
        info: '',
        placeholder: 'Percent|Range(0-100)',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: 0,
        max: 100,
        decimal: 2,
    },
    extentOfSegregationSwm: {
        class: '',
        formFieldType: 'number',
        key: 'extentOfSegregationSwm',
        displayPriority: 21,
        quesPos: 86,
        validations: [],
        label: 'Extent of segregation of municipal solid waste (%)',
        info: '',
        placeholder: 'Percent|Range(0-100)',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: 0,
        max: 100,
        decimal: 2,
    },
    extentOfMunicipalSwm: {
        class: '',
        formFieldType: 'number',
        key: 'extentOfMunicipalSwm',
        displayPriority: 22,
        quesPos: 87,
        validations: [],
        label: 'Extent of municipal solid waste recovered (%)',
        info: '',
        placeholder: 'Percent|Range(0-100)',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: 0,
        max: 100,
        decimal: 2,
        warning: { "value": 80, "condition": "gt", "message": 'Please note that the entered value exceeds the threshold of 80 lpcd' }
    },
    extentOfScientificSolidSwm: {
        class: '',
        formFieldType: 'number',
        key: 'extentOfScientificSolidSwm',
        displayPriority: 23,
        quesPos: 88,
        validations: [],
        label: 'Extent of scientific disposal of municipal solid waste (%)',
        info: '',
        placeholder: 'Percent|Range(0-100)',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: 0,
        max: 100,
        decimal: 2,
    },
    extentOfCostInSwm: {
        class: '',
        formFieldType: 'number',
        key: 'extentOfCostInSwm',
        displayPriority: 24,
        quesPos: 89,
        validations: [],
        label: 'Extent of cost recovery in SWM services (%)',
        info: '',
        placeholder: 'Percent|Range(0-100)',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: 0,
        max: 100,
        decimal: 2,
    },
    efficiencyInCollectionSwmUser: {
        class: '',
        formFieldType: 'number',
        key: 'efficiencyInCollectionSwmUser',
        displayPriority: 25,
        quesPos: 90,
        validations: [],
        label: 'Efficiency in collection of SWM user charges (%)',
        info: '',
        placeholder: 'Percent|Range(0-100)',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: 0,
        max: 100,
        decimal: 2,
        warning: { "value": 90, "condition": "gt", "message": 'Please note that the entered value exceeds the threshold of 90 lpcd' }
    },
    efficiencyInRedressalCustomerSwm: {
        class: '',
        formFieldType: 'number',
        key: 'efficiencyInRedressalCustomerSwm',
        displayPriority: 26,
        quesPos: 91,
        validations: [],
        label: 'Efficiency in redressal of customer complaints related to SWM (%)',
        info: '',
        placeholder: 'Percent|Range(0-100)',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: 0,
        max: 100,
        decimal: 2,
        warning: { "value": 80, "condition": "gt", "message": 'Please note that the entered value exceeds the threshold of 80 lpcd' }
    },
    coverageOfStormDrainage: {
        class: '',
        formFieldType: 'number',
        key: 'coverageOfStormDrainage',
        displayPriority: 27,
        quesPos: 92,
        validations: [],
        label: 'Coverage of storm water drainage network (%)',
        info: '',
        placeholder: 'Percent|Range(0-100)',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: 0,
        max: 100,
        decimal: 2,
    },
    incidenceOfWaterLogging: {
        class: '',
        formFieldType: 'number',
        key: 'incidenceOfWaterLogging',
        displayPriority: 28,
        quesPos: 93,
        validations: [],
        label: 'Incidence of water logging',
        info: '',
        placeholder: 'Nos. per year|Range(0-9999)',
        required: true,
        year: 8,
        autoSumValidation: '',
        logic: '',
        min: 0,
        max: 9999,
        decimal: 0,
    }
}

// async function getFromWiseKeyDetails(formType) {

//     let tempkeyDetailsForm1 = {};

//     if (formType == 'form1') {
//         tempkeyDetailsForm1 = JSON.parse(JSON.stringify(keyDetailsForm1));
//         return tempkeyDetailsForm1;
//     }
//     // if (formType == 'form2') {
//     //     tempkeyDetailsForm1 = JSON.parse(JSON.stringify(keyDetailsForm1));
//     //     tempkeyDetailsForm1.taxRevenue.autoSumValidation = 'sum';
//     //     tempkeyDetailsForm1.taxRevenue.logic = ['1.1.1', '1.1.2'];

//     //     tempkeyDetailsForm1.totOwnRevenue.autoSumValidation = 'sum';
//     //     tempkeyDetailsForm1.totOwnRevenue.logic = ['1.1', '1.2', '1.3', '1.4', '1.5'];

//     //     tempkeyDetailsForm1.centralGrants.autoSumValidation = 'sum';
//     //     tempkeyDetailsForm1.centralGrants.logic = ['2.1.1', '2.1.2'];

//     //     tempkeyDetailsForm1.otherGrants.autoSumValidation = 'sum';
//     //     tempkeyDetailsForm1.otherGrants.logic = ['2.2.1', '2.2.2', '2.2.3'];

//     //     tempkeyDetailsForm1.establishmentExp.autoSumValidation = 'sum';
//     //     tempkeyDetailsForm1.establishmentExp.logic = ['6.1.1', '6.1.2', '6.1.3'];

//     //     tempkeyDetailsForm1.totalRevenueExp.autoSumValidation = 'sum';
//     //     tempkeyDetailsForm1.totalRevenueExp.logic = ['6.1', '6.2', '6.3', '6.4', '6.5'];

//     //     tempkeyDetailsForm1.grossBorrowing.autoSumValidation = 'sum';
//     //     tempkeyDetailsForm1.grossBorrowing.logic = ['9.1', '9.2', '9.3', '9.4'];

//     //     return Object.assign(tempkeyDetailsForm1, keyDetailsForm2);
//     // }
// }

class tabsUpdationService {

    constructor(xviFcForm1Table) {
        this.detail = { ...xviFcForm1Table };
    }
    async getDataForDemographicDataTab(formType) {
        let form2 = [{ ...this.detail.yearOfSlb }];
        let form1 = [
            { ...this.detail.nameOfUlb },
            { ...this.detail.nameOfState },
            { ...this.detail.pop2011 },
            { ...this.detail.popApril2024 },
            { ...this.detail.areaOfUlb },
            { ...this.detail.yearOfElection },
            { ...this.detail.isElected },
            { ...this.detail.yearOfConstitution },
        ];
        let formData = formType == "form1" ? form1 : formType == "form2" ? form1.concat(form2) : [];
        return await arrangeFormData(formData);

    }
    async getDataForfinancialData(formType) {
        let form1 = [
            { ...this.detail.sourceOfFd },
            { ...this.detail.taxRevenue },
            { ...this.detail.feeAndUserCharges },
            { ...this.detail.interestIncome },
            { ...this.detail.otherIncome },
            { ...this.detail.totOwnRevenue },
            { ...this.detail.centralGrants },
            { ...this.detail.otherGrants },
            { ...this.detail.totalGrants },
            { ...this.detail.assignedRevAndCom },
            { ...this.detail.otherRevenue },
            { ...this.detail.totalRevenue },
            { ...this.detail.establishmentExp },
            { ...this.detail.oAndmExp },
            { ...this.detail.interestAndfinacialChar },
            { ...this.detail.otherRevenueExp },
            { ...this.detail.totalRevenueExp },
            { ...this.detail.capExp },
            { ...this.detail.totalExp },
            { ...this.detail.grossBorrowing },
        ];
        let form2 = [
            { ...this.detail.pTax },
            { ...this.detail.noOfRegiProperty },
            { ...this.detail.otherTax },
            { ...this.detail.rentalIncome },
            { ...this.detail.centralSponsoredScheme },
            { ...this.detail.unionFinanceGrants },
            { ...this.detail.sfcGrants },
            { ...this.detail.grantsOtherThanSfc },
            { ...this.detail.grantsWithoutState },
            { ...this.detail.salaries },
            { ...this.detail.pension },
            { ...this.detail.otherExp },
            { ...this.detail.adExp },
            { ...this.detail.centralStateBorrow },
            { ...this.detail.bonds },
            { ...this.detail.bankAndFinancial },
            { ...this.detail.otherBorrowing },
            { ...this.detail.receivablePTax },
            { ...this.detail.receivableFee },
            { ...this.detail.otherReceivable },
            { ...this.detail.totalReceivable },
            { ...this.detail.totalCashAndBankBal },
        ];
        let formData = formType == "form1" ? form1 : formType == "form2" ? form1.concat(form2) : [];
        return await arrangeFormData(formData);
    }
    async getDataForAccountingPractices() {
        let formData = [
            { ...this.detail.accSystem },
            { ...this.detail.accProvision },
            { ...this.detail.accInCashBasis },
            { ...this.detail.fsTransactionRecord },
            { ...this.detail.fsPreparedBy },
            { ...this.detail.revReceiptRecord },
            { ...this.detail.expRecord },
            { ...this.detail.accSoftware },
            { ...this.detail.onlineAccSysIntegrate },
            { ...this.detail.muniAudit },
            { ...this.detail.totSanction },
            { ...this.detail.totVacancy },
            { ...this.detail.accPosition },
        ];
        return await arrangeFormData(formData);
    }
    async getDataForUploadDoc() {
        let formData = [{ ...this.detail.auditedAnnualFySt }];
        return await arrangeFormData(formData);
    }
    async getDataForServiceLevelBenchmark() {
        let formData = [
            { ...this.detail.coverageOfWs },
            { ...this.detail.perCapitaOfWs },
            { ...this.detail.extentOfMeteringWs },
            { ...this.detail.extentOfNonRevenueWs },
            { ...this.detail.continuityOfWs },
            { ...this.detail.efficiencyInRedressalCustomerWs },
            { ...this.detail.qualityOfWs },
            { ...this.detail.costRecoveryInWs },
            { ...this.detail.efficiencyInCollectionRelatedWs },
            { ...this.detail.coverageOfToiletsSew },
            { ...this.detail.coverageOfSewNet },
            { ...this.detail.collectionEfficiencySew },
            { ...this.detail.adequacyOfSew },
            { ...this.detail.qualityOfSew },
            { ...this.detail.extentOfReuseSew },
            { ...this.detail.efficiencyInRedressalCustomerSew },
            { ...this.detail.extentOfCostWaterSew },
            { ...this.detail.efficiencyInCollectionSew },
            { ...this.detail.householdLevelCoverageLevelSwm },
            { ...this.detail.efficiencyOfCollectionSwm },
            { ...this.detail.extentOfSegregationSwm },
            { ...this.detail.extentOfMunicipalSwm },
            { ...this.detail.extentOfScientificSolidSwm },
            { ...this.detail.extentOfCostInSwm },
            { ...this.detail.efficiencyInCollectionSwmUser },
            { ...this.detail.efficiencyInRedressalCustomerSwm },
            { ...this.detail.coverageOfStormDrainage },
            { ...this.detail.incidenceOfWaterLogging },
        ];
        return await arrangeFormData(formData);
    }
}

async function arrangeFormData(formData) {
    return formData.sort((a, b) => parseInt(a.quesPos) - parseInt(b.quesPos));
}

module.exports.keyDetailsForm1 = keyDetailsForm1;
module.exports.keyDetailsForm2 = keyDetailsForm2;
// module.exports.getFromWiseKeyDetails = getFromWiseKeyDetails;
module.exports.tabsUpdationService = tabsUpdationService;