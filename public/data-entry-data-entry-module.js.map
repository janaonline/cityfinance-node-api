{"version":3,"sources":["webpack:///./src/app/dashboard/data-entry/bulk-entry/bulk-entry.component.html","webpack:///./src/app/dashboard/data-entry/bulk-entry/bulk-entry.component.scss","webpack:///./src/app/dashboard/data-entry/bulk-entry/bulk-entry.component.ts","webpack:///./src/app/dashboard/data-entry/data-entry.module.ts","webpack:///./src/app/dashboard/data-entry/dataentry.router.ts","webpack:///./src/app/dashboard/data-entry/ledger-list/ledger-list.component.html","webpack:///./src/app/dashboard/data-entry/ledger-list/ledger-list.component.scss","webpack:///./src/app/dashboard/data-entry/ledger-list/ledger-list.component.ts","webpack:///./src/app/dashboard/data-entry/ledger/ledger.component.html","webpack:///./src/app/dashboard/data-entry/ledger/ledger.component.scss","webpack:///./src/app/dashboard/data-entry/ledger/ledger.component.ts","webpack:///./src/app/shared/services/common.service.ts","webpack:///./src/app/shared/services/utility.service.ts"],"names":[],"mappings":"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","file":"data-entry-data-entry-module.js","sourcesContent":["module.exports = \"<div class=\\\"common-container\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-6\\\">\\r\\n        <h3>ULB Data Bulk Entry</h3>\\r\\n      </div>\\r\\n      <div class=\\\"col-md-6\\\">\\r\\n        <button [routerLink]=\\\"['../list']\\\" class=\\\"right btn btn-primary\\\">Entry List</button>\\r\\n      </div>\\r\\n    </div>\\r\\n    <br />\\r\\n    <span>Note* : Current version supports bulk data entry for single year only</span>\\r\\n    <br />\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n      <form [formGroup]=\\\"bulkEntryForm\\\" (ngSubmit)=\\\"upload()\\\">\\r\\n        <div class=\\\"col-md-4\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label>Financial Year</label>\\r\\n            <select formControlName=\\\"year\\\" class=\\\"form-control\\\">\\r\\n              <option *ngFor=\\\"let yr of years\\\" [ngValue]=\\\"yr\\\">{{ yr }}</option>\\r\\n            </select>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"col-md-4\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label>Select files to upload</label>\\r\\n            <input id=\\\"cin\\\" name=\\\"cin\\\" type=\\\"file\\\" (change)=\\\"fileChangeEvent($event)\\\" placeholder=\\\"Upload a file...\\\"\\r\\n              multiple />\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"col-md-4\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <br />\\r\\n            <button type=\\\"submit\\\" class=\\\"btn btn-primary btn-s\\\"> Upload</button>\\r\\n          </div>\\r\\n        </div>\\r\\n      </form>\\r\\n    </div>\\r\\n    <br/><br/>\\r\\n\\r\\n    <div class=\\\"row\\\" *ngIf=\\\"uploadResult\\\">\\r\\n      <table style=\\\"width: 50%\\\">\\r\\n        <tr>\\r\\n          <th>Perticular</th>\\r\\n          <th>status</th>\\r\\n        </tr>\\r\\n        <tr *ngFor=\\\"let item of uploadResult\\\">\\r\\n          <td>{{item.msg}}</td>\\r\\n          <td>{{item.success}}</td>\\r\\n        </tr>\\r\\n      </table>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n</div>\\r\\n\"","module.exports = \"\"","import { DataEntryService } from './../data-entry.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { Validators, FormGroup, FormBuilder } from '@angular/forms';\r\n\r\n@Component({\r\n    selector: 'app-bulk-entry',\r\n    templateUrl: './bulk-entry.component.html',\r\n    styleUrls: ['./bulk-entry.component.scss']\r\n})\r\nexport class BulkEntryComponent implements OnInit {\r\n\r\n    submitted: boolean = false;\r\n    years: any = [];\r\n    bulkEntryForm: FormGroup;\r\n    filesToUpload: Array<File> = [];\r\n    uploadResult: any;\r\n    \r\n    constructor(private formBuilder: FormBuilder, private dataEntryService: DataEntryService) { }\r\n\r\n    ngOnInit() {\r\n        this.years = ['2015-16', '2016-17', '2017-18'];\r\n        this.bulkEntryForm = this.formBuilder.group({\r\n            year: [this.years[0], Validators.required],\t\r\n        });\r\n    }\r\n\r\n    upload() {\r\n        this.submitted = true;\r\n        if(this.bulkEntryForm.invalid || !this.bulkEntryForm.get('year').value){\r\n            return false;\r\n        }\r\n        const formData: any = new FormData();\r\n        const files: Array<File> = this.filesToUpload;\r\n        console.log(files);\r\n        formData.append('year', this.bulkEntryForm.get('year').value);\r\n        for (let i = 0; i < files.length; i++) {\r\n            formData.append(\"files\", files[i], files[i]['name']);\r\n        }\r\n        console.log('form data variable :   ' + formData.toString());\r\n        this.dataEntryService.bulkEntry(formData).subscribe(res =>{\r\n            if(res['success']){\r\n                this.uploadResult = res['data'];\r\n                alert('Upload summary is available below');\r\n            }\r\n        });\r\n    }\r\n\r\n    fileChangeEvent(fileInput: any) {\r\n        this.filesToUpload = <Array<File>>fileInput.target.files;\r\n        //this.product.photo = fileInput.target.files[0]['name'];\r\n    }\r\n\r\n}\r\n","import { AgGridModule } from 'ag-grid-angular';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LedgerComponent } from './ledger/ledger.component';\r\nimport { DataEntryRouter } from './dataentry.router';\r\nimport { ReactiveFormsModule } from '@angular/forms';\r\nimport { LedgerListComponent } from './ledger-list/ledger-list.component';\r\nimport { BulkEntryComponent } from './bulk-entry/bulk-entry.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    DataEntryRouter,\r\n    ReactiveFormsModule,\r\n    AgGridModule.withComponents([])\r\n\r\n  ],\r\n  declarations: [LedgerComponent, LedgerListComponent, BulkEntryComponent]\r\n})\r\nexport class DataEntryModule { }\r\n","import { Routes, RouterModule } from '@angular/router';\r\nimport { ModuleWithProviders } from '@angular/core';\r\nimport { LedgerComponent } from './ledger/ledger.component';\r\nimport { LedgerListComponent } from './ledger-list/ledger-list.component';\r\nimport { BulkEntryComponent } from './bulk-entry/bulk-entry.component';\r\n\r\n\r\nexport const dataEntryRouter: Routes = [\r\n    { path: '', redirectTo: 'list', pathMatch: 'full' },\r\n    { path: 'list', component: LedgerListComponent },\r\n    { path: 'ledger', component: LedgerComponent },\r\n    { path: 'bulk', component: BulkEntryComponent },\r\n    \r\n];\r\n\r\nexport const DataEntryRouter: ModuleWithProviders = RouterModule.forChild(dataEntryRouter);\r\n","module.exports = \"<div class=\\\"common-container\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-6\\\">\\r\\n      <h3>ULB Data Entry List</h3>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-6\\\">\\r\\n      <button [routerLink]=\\\"['../ledger']\\\" class=\\\"right btn btn-primary\\\" >New Entry</button>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"row\\\">\\r\\n    <!-- {{ledgerLogs | json}} -->\\r\\n    <div class=\\\"col-md-12\\\">\\r\\n      <ag-grid-angular \\r\\n        style=\\\"width: 100%; height: 450px;\\\" \\r\\n        class=\\\"ag-theme-balham\\\"\\r\\n        [columnDefs]=\\\"columnDefs\\\"\\r\\n        [rowData]=\\\"ledgerLogs\\\" \\r\\n        [enableColResize]=\\\"true\\\"\\r\\n        [enableSorting]=\\\"true\\\"\\r\\n        [enableFilter]=\\\"true\\\"\\r\\n        [pagination]=\\\"true\\\"\\r\\n        [paginationAutoPageSize]=\\\"true\\\"\\r\\n      >\\r\\n</ag-grid-angular>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n\\r\\n</div>\\r\\n</div>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { DataEntryService } from '../data-entry.service';\r\n\r\n@Component({\r\n  selector: 'app-ledger-list',\r\n  templateUrl: './ledger-list.component.html',\r\n  styleUrls: ['./ledger-list.component.scss']\r\n})\r\nexport class LedgerListComponent implements OnInit {\r\n\r\n  ledgerLogs = [];\r\n  columnDefs = [\r\n    {headerName: 'State', field: 'state' },\r\n    {headerName: 'ULB', field: 'ulb' },\r\n    {headerName: 'Year', field: 'year'},\r\n    {headerName: 'Wards', field: 'wards', filter: \"agNumberColumnFilter\" },\r\n    {headerName: 'Area', field: 'area', filter: \"agNumberColumnFilter\" },\r\n    {headerName: 'Population', field: 'population', filter: \"agNumberColumnFilter\" },\r\n    {headerName: 'Audit Status', field: 'audit_status'},\r\n    {headerName: 'Audit Firm', field: 'audit_firm'},\r\n    {headerName: 'Partner Name', field: 'partner_name'},\r\n    {headerName: 'ICAI Membership#', field: 'icai_membership_number'},\r\n    {headerName: 'Reverified At', field: 'reverified_at', filter: \"agDateColumnFilter\", valueFormatter: (params) => {\r\n      var date = new Date(parseInt(params.value));\r\n      return date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getUTCFullYear();\r\n    }},\r\n    {headerName: 'Reverified By', field: 'reverified_by', filter: \"agDateColumnFilter\"},\r\n  ];\r\n  constructor(private dataEntryService: DataEntryService) { }\r\n\r\n  ngOnInit() {\r\n    this.dataEntryService.getLedgerLogs({}).subscribe(res => {\r\n      if(res['success']){\r\n        this.ledgerLogs = res['data'];\r\n      } else{\r\n        alert('Failed');\r\n      }\r\n    })\r\n  }\r\n\r\n  onFirstDataRendered(params) {\r\n    params.api.sizeColumnsToFit();\r\n  }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"common-container\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-6\\\">\\r\\n      <h3>ULB Data Entry</h3>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-6\\\">\\r\\n      <button [routerLink]=\\\"['../list']\\\" class=\\\"right btn btn-primary\\\">Entry List</button>\\r\\n      <button [routerLink]=\\\"['../bulk']\\\" class=\\\"right btn btn-primary\\\">Bulk Entry</button>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"row\\\">\\r\\n      <form [formGroup]=\\\"ledgerForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n        <div class=\\\"col-md-4\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label>Financial Year</label>\\r\\n            <select formControlName=\\\"year\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && lf.year.errors }\\\">\\r\\n              <option *ngFor=\\\"let yr of years\\\" [ngValue]=\\\"yr\\\">{{ yr }}</option>\\r\\n            </select>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"col-md-4\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label>State</label>\\r\\n            <select formControlName=\\\"state\\\" (change)=\\\"loadUlbs()\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && lf.state.errors }\\\">\\r\\n              <option *ngFor=\\\"let st of states\\\" [ngValue]=\\\"st\\\">{{ st.name }}</option>\\r\\n            </select>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"col-md-4\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label>ULB</label>\\r\\n            <select formControlName=\\\"ulb\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && lf.ulb.errors }\\\">\\r\\n              <option *ngFor=\\\"let ul of ulbs\\\" [ngValue]=\\\"ul\\\">{{ ul.name }}</option>\\r\\n            </select>\\r\\n          </div>\\r\\n        </div>\\r\\n        <!-- <div class=\\\"col-md-4\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label># Wards</label>\\r\\n            <input type=\\\"text\\\" formControlName=\\\"wards\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && lf.wards.errors }\\\" />\\r\\n            <div *ngIf=\\\"submitted && lf.wards.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"lf.wards.errors.required\\\"># Wards is required</div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"col-md-4\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label>Population</label>\\r\\n            <input type=\\\"text\\\" formControlName=\\\"population\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && lf.population.errors }\\\" />\\r\\n            <div *ngIf=\\\"submitted && lf.population.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"lf.population.errors.required\\\">Population is required</div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"col-md-4\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label>Area (Sq Km)</label>\\r\\n            <input type=\\\"text\\\" formControlName=\\\"area\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && lf.area.errors }\\\" />\\r\\n            <div *ngIf=\\\"submitted && lf.area.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"lf.area.errors.required\\\">Area is required</div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div> -->\\r\\n        <!-- <div class=\\\"col-md-12\\\">\\r\\n          <hr />\\r\\n        </div>\\r\\n        <div class=\\\"col-md-2\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label title=\\\"What are the possible audit status?\\\">Audit Status ?</label>\\r\\n            <input type=\\\"text\\\" formControlName=\\\"audit_status\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && lf.audit_status.errors }\\\" />\\r\\n            <div *ngIf=\\\"submitted && lf.audit_status.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"lf.audit_status.errors.required\\\">Audit Status is required</div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"col-md-4\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label>Audit Firm Name</label>\\r\\n            <input type=\\\"text\\\" formControlName=\\\"audit_firm\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && lf.audit_firm.errors }\\\" />\\r\\n            <div *ngIf=\\\"submitted && lf.audit_firm.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"lf.audit_firm.errors.required\\\">Audit Firm is required</div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"col-md-4\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label>Partner Name</label>\\r\\n            <input type=\\\"text\\\" formControlName=\\\"partner_name\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && lf.partner_name.errors }\\\" />\\r\\n            <div *ngIf=\\\"submitted && lf.partner_name.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"lf.partner_name.errors.required\\\">Partner Name is required</div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"col-md-2\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label>ICAI Membership #</label>\\r\\n            <input type=\\\"text\\\" formControlName=\\\"icai_membership_number\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && lf.icai_membership_number.errors }\\\" />\\r\\n            <div *ngIf=\\\"submitted && lf.icai_membership_number.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"lf.icai_membership_number.errors.required\\\">ICAI Membership Number is required</div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"col-md-12\\\">\\r\\n          <hr />\\r\\n        </div>\\r\\n        <div class=\\\"col-md-4\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label title=\\\"is this the data entry date on this application? OR the date of data capture\\\">Date of Entry ?</label>\\r\\n            <input type=\\\"date\\\" formControlName=\\\"created_at\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && lf.created_at.errors }\\\" />\\r\\n            <div *ngIf=\\\"submitted && lf.created_at.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"lf.created_at.errors.required\\\">Date of entry is required</div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"col-md-4\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label title=\\\"is this the user who is entering data on this application? OR the person who capture this data offline\\\">Entered\\r\\n              by ?</label>\\r\\n            <input type=\\\"text\\\" formControlName=\\\"created_by\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && lf.created_by.errors }\\\" />\\r\\n            <div *ngIf=\\\"submitted && lf.created_by.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"lf.created_by.errors.required\\\">Entered by user is required</div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"col-md-4\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label>Date of verification</label>\\r\\n            <input type=\\\"date\\\" formControlName=\\\"verified_at\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && lf.verified_at.errors }\\\" />\\r\\n            <div *ngIf=\\\"submitted && lf.verified_at.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"lf.verified_at.errors.required\\\">Verified at date is required</div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"col-md-4\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label>Verified by</label>\\r\\n            <input type=\\\"text\\\" formControlName=\\\"verified_by\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && lf.verified_by.errors }\\\" />\\r\\n            <div *ngIf=\\\"submitted && lf.verified_by.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"lf.verified_by.errors.required\\\">Verified by user is required</div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"col-md-4\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label>Date of Re-verification</label>\\r\\n            <input type=\\\"date\\\" formControlName=\\\"reverified_at\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && lf.reverified_at.errors }\\\" />\\r\\n            <div *ngIf=\\\"submitted && lf.reverified_at.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"lf.reverified_at.errors.required\\\">Date of reverified is required</div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"col-md-4\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label>Re-verified by</label>\\r\\n            <input type=\\\"text\\\" formControlName=\\\"reverified_by\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && lf.reverified_by.errors }\\\" />\\r\\n            <div *ngIf=\\\"submitted && lf.reverified_by.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"lf.reverified_by.errors.required\\\">Reverified by user is required</div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div> -->\\r\\n        <div class=\\\"col-md-4\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <label>Upload Data Sheet</label>\\r\\n            <input type=\\\"file\\\" #fileInput formControlName=\\\"file\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && lf.file.errors }\\\" />\\r\\n            <div *ngIf=\\\"submitted && lf.file.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n              <div *ngIf=\\\"lf.file.errors.required\\\">Data entry file is required</div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"col-md-4\\\">\\r\\n          <div class=\\\"form-group\\\">\\r\\n            <br />\\r\\n            <button class=\\\"btn btn-primary\\\">Submit Entry</button>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n      </form>\\r\\n  </div>\\r\\n</div>\\r\\n</div>\"","module.exports = \"hr {\\n  margin-top: 10px;\\n  margin-bottom: 10px; }\\n\\nbutton.right {\\n  margin: auto 5px; }\\n\"","import { Component, OnInit, ChangeDetectorRef, ViewChild } from '@angular/core';\r\nimport { Validators, FormGroup, FormBuilder } from '@angular/forms';\r\nimport { CommonService } from '../../../shared/services/common.service';\r\nimport { DataEntryService } from '../data-entry.service';\r\nimport { UtilityService } from '../../../shared/services/utility.service';\r\n\r\n@Component({\r\n  selector: 'app-ledger',\r\n  templateUrl: './ledger.component.html',\r\n  styleUrls: ['./ledger.component.scss']\r\n})\r\nexport class LedgerComponent implements OnInit {\r\n\r\n  states: any = [];\r\n  years: any = [];\r\n  ulbs: any = [];\r\n  ledgerForm: FormGroup;\r\n  submitted = false;\r\n  @ViewChild(\"fileInput\") fileInput;\r\n  \r\n  constructor(private formBuilder: FormBuilder, private commonService: CommonService, \r\n    private dataEntryService: DataEntryService, private utilService: UtilityService) { }\r\n\r\n  ngOnInit() {\r\n    this.years = ['2015-16', '2016-17', '2017-18']\r\n\r\n    // this.ledgerForm = this.formBuilder.group({\r\n    //   state: ['', Validators.required],\r\n    //   ulb: ['', Validators.required],\r\n    //   year: [this.years[0], Validators.required],\t\r\n    //   wards: ['', Validators.required],\t\r\n    //   population: ['', Validators.required],\t\r\n    //   area: ['', Validators.required],\t\r\n    //   audit_status: ['', Validators.required],\r\n    //   audit_firm: ['', Validators.required],\r\n    //   partner_name: ['', Validators.required],\r\n    //   icai_membership_number: ['', Validators.required],\r\n    //   created_at: ['', Validators.required],\r\n    //   created_by: ['', Validators.required],\r\n    //   verified_at: ['', Validators.required],\r\n    //   verified_by: ['', Validators.required],\r\n    //   reverified_at: ['', Validators.required],\r\n    //   reverified_by: ['', Validators.required],\r\n    //   file: [null, Validators.required]\r\n    // });\r\n\r\n    this.ledgerForm = this.formBuilder.group({\r\n      state: ['', Validators.required],\r\n      ulb: ['', Validators.required],\r\n      year: [this.years[0], Validators.required],\t\r\n      file: [null, Validators.required]\r\n    });\r\n\r\n    this.commonService.states.subscribe(res => {\r\n      this.states = res;\r\n      this.ledgerForm.value.state = this.states[0];\r\n    })\r\n    this.commonService.loadStates(false);\r\n\r\n\r\n  }\r\n\r\n  get lf() { \r\n    return this.ledgerForm.controls; \r\n  }\r\n\r\n  loadUlbs(){\r\n    if(this.ledgerForm.value.state && this.ledgerForm.value.state.code){\r\n      this.commonService.getUlbByState(this.ledgerForm.value.state.code).subscribe(res => {\r\n        this.ulbs = res['data']['ulbs'];\r\n        this.ledgerForm.value.ulb = this.ulbs[0];\r\n      })\r\n    }\r\n    \r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n    // stop here if form is invalid\r\n    let file = this.fileInput.nativeElement;\r\n    if (this.ledgerForm.invalid || !(file.files && file.files[0]) ){\r\n      return;\r\n    }\r\n    let formData = this.utilService.jsonToFormData(this.ledgerForm.value, ['file', 'state', 'ulb'], new FormData());\r\n    formData.append('file', file.files[0]);\r\n    formData.append('stateCode', this.ledgerForm.value.state.code);\r\n    formData.append('stateName', this.ledgerForm.value.state.name);\r\n    formData.append('ulbCode', this.ledgerForm.value.ulb.code);\r\n    formData.append('ulbName', this.ledgerForm.value.ulb.name);\r\n    formData.append('wards', this.ledgerForm.value.ulb.wards);\r\n    formData.append('population', this.ledgerForm.value.ulb.population);\r\n    formData.append('area', this.ledgerForm.value.ulb.area);\r\n\r\n    this.dataEntryService.createEntry(formData).subscribe(res => {\r\n      if(res['success']){\r\n        alert('Successfully added');\r\n        this.submitted = false;\r\n        // this.ledgerForm.reset();\r\n      } else{\r\n        alert(res['msg']);\r\n      }\r\n    })\r\n      \r\n  }\r\n\r\n\r\n\r\n}\r\n","import { Subject, Observable } from 'rxjs';\r\nimport { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { environment } from './../../../environments/environment';\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class CommonService {\r\n\r\n  private stateArr = [];\r\n  public states: Subject<any> = new Subject<any>();\r\n\r\n  // private states: any = [];\r\n  constructor(private http: HttpClient) { }\r\n\r\n  // we are loading states while loading dashboard\r\n  public loadStates(doLoadFromServer: boolean){\r\n    if(this.stateArr.length > 0 && !doLoadFromServer){\r\n      this.states.next(this.stateArr);\r\n    }\r\n    this.http.get(environment.api.url + 'lookup/states').subscribe(res => {\r\n      this.stateArr = res['data'];\r\n      this.states.next(this.stateArr);\r\n    });\r\n  }\r\n\r\n  getAllUlbs(){\r\n    return this.http.get(environment.api.url + 'lookup/ulbs');\r\n  }\r\n\r\n  // since ULB is based on state, query will happen on demand\r\n  getUlbByState(stateCode){\r\n    return this.http.get(environment.api.url + 'lookup/states/' + stateCode + '/ulbs');\r\n  }\r\n\r\n  loadStatesAgg(): Observable<any> {\r\n    return this.http.get(\"/assets/files/homeDashboardStateAggData.json\");\r\n  }\r\n\r\n  loadHomeStatisticsData(): Observable<any> {\r\n    return this.http.get(\"/assets/files/homeDashboardData.json\");\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UtilityService {\r\n\r\n  constructor() { }\r\n\r\n  jsonToFormData(jsonObj, ignoreKeys: string[], formData: FormData) : FormData{\r\n    // let formData: FormData = new FormData();\r\n    const keys = Object.keys(jsonObj);\r\n    for (let i = 0; i < keys.length; i++) {\r\n      if(ignoreKeys.indexOf(keys[i]) > -1){\r\n        continue;\r\n      }\r\n      formData.append(keys[i], jsonObj[keys[i]]);\r\n    }\r\n    return formData;\r\n  }\r\n\r\n\r\n\r\n\r\n}\r\n"],"sourceRoot":""}