{"version":3,"sources":["webpack:///./src/app/dashboard/user/onboard-user/onboard-user.component.html","webpack:///./src/app/dashboard/user/onboard-user/onboard-user.component.scss","webpack:///./src/app/dashboard/user/onboard-user/onboard-user.component.ts","webpack:///./src/app/dashboard/user/profile/profile.component.html","webpack:///./src/app/dashboard/user/profile/profile.component.scss","webpack:///./src/app/dashboard/user/profile/profile.component.ts","webpack:///./src/app/dashboard/user/user-list/user-list.component.html","webpack:///./src/app/dashboard/user/user-list/user-list.component.scss","webpack:///./src/app/dashboard/user/user-list/user-list.component.ts","webpack:///./src/app/dashboard/user/user.module.ts","webpack:///./src/app/dashboard/user/user.router.ts","webpack:///./src/app/dashboard/user/user.service.ts"],"names":[],"mappings":"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","file":"user-user-module.js","sourcesContent":["module.exports = \"<div class=\\\"common-container\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-6\\\">\\r\\n      <h3>Onboard User</h3>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-6\\\">\\r\\n      <button [routerLink]=\\\"['../list']\\\" class=\\\"right btn btn-primary\\\">User List</button>\\r\\n    </div>\\r\\n  </div>\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-6\\\">\\r\\n      <form [formGroup]=\\\"userOnboardForm\\\" (ngSubmit)=\\\"onboard()\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label>Name</label>\\r\\n          <input type=\\\"text\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.name.errors }\\\" />\\r\\n          <div *ngIf=\\\"submitted && f.name.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n            <div *ngIf=\\\"f.name.errors.required\\\">Name is required</div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label>Role</label>\\r\\n          <select name=\\\"role\\\" formControlName=\\\"role\\\" class=\\\"form-control\\\" >\\r\\n            <option value=\\\"USER\\\">User</option>\\r\\n            <option value=\\\"ADMIN\\\">Admin</option>\\r\\n            <option value=\\\"SUPERADMIN\\\">Super Admin</option>\\r\\n          </select>\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label>Mobile</label>\\r\\n          <input type=\\\"text\\\" formControlName=\\\"mobile\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.mobile.errors }\\\" />\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label>Email</label>\\r\\n          <input type=\\\"text\\\" formControlName=\\\"email\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.email.errors }\\\" />\\r\\n          <div *ngIf=\\\"submitted && f.email.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n            <div *ngIf=\\\"f.email.errors.required\\\">Email is required</div>\\r\\n            <div *ngIf=\\\"f.email.errors.email\\\">Email must be a valid email address</div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <label>password</label>\\r\\n          <input type=\\\"password\\\" formControlName=\\\"password\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && f.password.errors }\\\" />\\r\\n        </div>\\r\\n        <div class=\\\"form-group\\\">\\r\\n          <button class=\\\"btn btn-primary\\\">Onboard</button>\\r\\n        </div>\\r\\n      </form>\\r\\n\\r\\n    </div>\\r\\n  </div>\\r\\n</div>\\r\\n</div>\"","module.exports = \"\"","import { UserService } from './../user.service';\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, Validators, FormBuilder } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\n\r\n@Component({\r\n  selector: 'app-onboard-user',\r\n  templateUrl: './onboard-user.component.html',\r\n  styleUrls: ['./onboard-user.component.scss']\r\n})\r\nexport class OnboardUserComponent implements OnInit {\r\n \r\n  userOnboardForm: FormGroup;\r\n  submitted: boolean = false;\r\n  constructor(private fb: FormBuilder, private userService: UserService, private router: Router) { }\r\n\r\n  ngOnInit() {\r\n    this.userOnboardForm = this.fb.group({\r\n      name: ['', Validators.required],\r\n      mobile: ['', []],\r\n      email: ['', [Validators.required, Validators.email]],\r\n      password: ['', Validators.required],\r\n      role: ['', [Validators.required]]\r\n    });\r\n  }\r\n\r\n  get f() { \r\n    return this.userOnboardForm.controls; \r\n  }\r\n\r\n  onboard() {\r\n    this.submitted = true;\r\n    if(!this.userOnboardForm.valid){\r\n      return false;\r\n    }\r\n    this.userService.onboard(this.userOnboardForm.value).subscribe(res => {\r\n      console.log(res);\r\n      if(res['success']){\r\n        alert('User Onboarded');\r\n      }\r\n      \r\n      \r\n    })\r\n  }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"common-container\\\">\\r\\n    <div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-md-6\\\"><h2>User Profile</h2></div>\\r\\n        <div class=\\\"col-md-6\\\"><button  [routerLink]=\\\"['../list']\\\" class=\\\"right btn btn-primary\\\">User List</button></div>\\r\\n    </div>\\r\\n  <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-md-6 offset-md-3\\\">\\r\\n         \\r\\n          <form [formGroup]=\\\"profileForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n              <div class=\\\"form-group\\\">\\r\\n                  <label>Name</label>\\r\\n                  <input type=\\\"text\\\" formControlName=\\\"name\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && pf.name.errors }\\\" />\\r\\n                  <div *ngIf=\\\"submitted && pf.name.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                      <div *ngIf=\\\"pf.name.errors.required\\\">Name is required</div>\\r\\n                  </div>\\r\\n              </div>\\r\\n              <div class=\\\"form-group\\\">\\r\\n                  <label>Email / Username</label>\\r\\n                  <input type=\\\"text\\\" formControlName=\\\"username\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && pf.username.errors }\\\" />\\r\\n                  <div *ngIf=\\\"submitted && pf.username.errors\\\" class=\\\"invalid-feedback\\\">\\r\\n                      <div *ngIf=\\\"pf.username.errors.required\\\">Email is required</div>\\r\\n                      <div *ngIf=\\\"pf.username.errors.username\\\">Email must be a valid email address</div>\\r\\n                  </div>\\r\\n              </div>\\r\\n              <div class=\\\"form-group\\\">\\r\\n                <label>Mobile</label>\\r\\n                <input type=\\\"text\\\" formControlName=\\\"mobile\\\" class=\\\"form-control\\\" [ngClass]=\\\"{ 'is-invalid': submitted && pf.mobile.errors }\\\" />\\r\\n              </div>\\r\\n              <div class=\\\"form-group\\\">\\r\\n                  <button class=\\\"btn btn-primary\\\">Update Profile</button>\\r\\n              </div>\\r\\n          </form>\\r\\n      </div>\\r\\n  </div>\\r\\n</div>\\r\\n</div>\"","module.exports = \"\"","import { Component, OnInit } from '@angular/core';\r\nimport { FormGroup, FormBuilder, Validators } from '@angular/forms';\r\nimport { UserService } from '../user.service';\r\n\r\n@Component({\r\n  selector: 'app-profile',\r\n  templateUrl: './profile.component.html',\r\n  styleUrls: ['./profile.component.scss']\r\n})\r\nexport class ProfileComponent implements OnInit {\r\n  profileForm: FormGroup;\r\n  submitted = false;\r\n\r\n  constructor(private formBuilder: FormBuilder, private userService: UserService) { }\r\n\r\n  ngOnInit() {\r\n\r\n    this.profileForm = this.formBuilder.group({\r\n      _id: ['', Validators.required],\r\n      name: ['', Validators.required],\r\n      username: ['', [Validators.required, Validators.email]],\r\n      mobile: ['', Validators.required],\r\n    });\r\n\r\n    this.userService.getProfile().subscribe(res => {\r\n      this.profileForm.reset(res['user']);\r\n    })\r\n  }\r\n\r\n  get pf() { \r\n    return this.profileForm.controls; \r\n  }\r\n\r\n  onSubmit() {\r\n    this.submitted = true;\r\n    // stop here if form is invalid\r\n    if (this.profileForm.invalid) {\r\n      return;\r\n    }\r\n    this.userService.update(this.profileForm.value).subscribe(res => {\r\n      if(res['success']){\r\n        alert('Updated Successfully');\r\n      }else{\r\n        alert('Error!');\r\n      }\r\n    });      \r\n  }\r\n\r\n}\r\n","module.exports = \"<div class=\\\"common-container\\\">\\r\\n  <div class=\\\"container\\\">\\r\\n\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-6\\\">\\r\\n      <h3>User List</h3>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-6\\\">\\r\\n      <button [routerLink]=\\\"['../onboard']\\\" class=\\\"right btn btn-primary\\\">Onboard User</button>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-12\\\">\\r\\n      <ag-grid-angular style=\\\"width: 100%; height: 450px;\\\" class=\\\"ag-theme-balham\\\" [columnDefs]=\\\"columnDefs\\\" [rowData]=\\\"userList\\\"\\r\\n        [enableSorting]=\\\"true\\\" [enableFilter]=\\\"true\\\" [pagination]=\\\"true\\\" [paginationAutoPageSize]=\\\"true\\\"\\r\\n        [enableColResize]=\\\"true\\\" (firstDataRendered)=\\\"onFirstDataRendered($event)\\\">\\r\\n      </ag-grid-angular>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n\\r\\n</div>\\r\\n</div>\"","module.exports = \"\"","import { UserService } from './../user.service';\r\nimport { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-user-list',\r\n  templateUrl: './user-list.component.html',\r\n  styleUrls: ['./user-list.component.scss']\r\n})\r\nexport class UserListComponent implements OnInit {\r\n\r\n  userList = [];\r\n  columnDefs = [\r\n    {headerName: 'Name', field: 'name' },\r\n    {headerName: 'Email', field: 'username' },\r\n    {headerName: 'Mobile', field: 'mobile' },\r\n    {headerName: 'Role', field: 'role'},\r\n    {headerName: 'Joined On', field: 'createdAt', filter: 'agDateColumnFilter',\r\n      valueFormatter: (params) => {\r\n        var date = new Date(parseInt(params.value));\r\n        return date.getDate() + '/' + (date.getMonth() + 1) + '/' + date.getUTCFullYear();\r\n      }\r\n    },\r\n    {headerName: 'Is Active', field: 'isActive' },\r\n    {headerName: 'Is Deleted', field: 'isDeleted' },\r\n  ];\r\n  constructor(private userService: UserService) { }\r\n\r\n  ngOnInit() {\r\n    this.userService.getUsers({}).subscribe(res => {\r\n      if(res['success']){\r\n        this.userList = res['data'];\r\n      } else{\r\n        alert('Failed');\r\n      }\r\n    })\r\n  }\r\n\r\n  onFirstDataRendered(params) {\r\n    params.api.sizeColumnsToFit();\r\n  }\r\n\r\n}\r\n","import { AgGridModule } from 'ag-grid-angular';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { UserRouter } from './user.router';\r\nimport { ProfileComponent } from './profile/profile.component';\r\nimport { ReactiveFormsModule, FormsModule } from '@angular/forms';\r\nimport { UserListComponent } from './user-list/user-list.component';\r\nimport { OnboardUserComponent } from './onboard-user/onboard-user.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    UserRouter,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    AgGridModule.withComponents([])\r\n\r\n\r\n  ],\r\n  declarations: [ProfileComponent, UserListComponent, OnboardUserComponent]\r\n})\r\nexport class UserModule { }\r\n","import { Routes, RouterModule } from '@angular/router';\r\nimport { ModuleWithProviders } from '@angular/core';\r\nimport { ProfileComponent } from './profile/profile.component';\r\nimport { OnboardUserComponent } from './onboard-user/onboard-user.component';\r\nimport { UserListComponent } from './user-list/user-list.component';\r\n\r\n\r\nexport const userRouter: Routes = [\r\n    { path: '', redirectTo: 'profile', pathMatch: 'full' },\r\n    { path: 'profile', component: ProfileComponent },\r\n    { path: 'onboard', component: OnboardUserComponent },\r\n    { path: 'list', component: UserListComponent },\r\n    \r\n];\r\n\r\nexport const UserRouter: ModuleWithProviders = RouterModule.forChild(userRouter);\r\n","import { environment } from './../../../environments/environment';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  getProfile(){\r\n    return this.http.get(environment.api.url + 'users/profile');\r\n  }\r\n\r\n  update(userInfo){\r\n    return this.http.put(environment.api.url + 'users/update', userInfo);\r\n  }\r\n\r\n  onboard(newUser){\r\n    return this.http.post(environment.api.url + 'users/onboard', newUser);\r\n  }\r\n\r\n  getUsers(criteria){\r\n    return this.http.post(environment.api.url + 'users/getAll', criteria);\r\n  }\r\n}\r\n"],"sourceRoot":""}