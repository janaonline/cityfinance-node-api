# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Check development branch 

on:
  pull_request:
    types: 
      - closed
    branches: 
      - "development" 

jobs:
  lint:
    runs-on: ubuntu-latest
    steps: 
     - name: Run Lint Test 
       run: echo "Lint Test Runned Successfully"
  test:
    needs: lint
    runs-on: ubuntu-latest
    steps:
      # - name: Get code
      #   uses: actions/checkout@v3
      # - name: Cache dependencies
      #   id: cache
      #   uses: actions/cache@v3
      #   with:
      #     path: ~/.npm
      #     key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
      - name: Run Test 
        run: echo "E2E test, Unit test and Integration Test Runned Successfully"
      # - name: Test code check
      #   id: run-tests
      #   run: npm run test
      # - name: Upload test report
      #   if: failure() && steps.run-tests.outcome == 'failure'
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: test-report
      #     path: test.json

  build:
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.15.0]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/ 
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - name: Install Dependencies
      run: npm install
    - name: Create staging environment file 
      run: |
        touch .env
        echo "$DEV_CITY_ENV" | sudo tee .env >/dev/null
      env:
        DEV_CITY_ENV: ${{ secrets.DEV_CITY_ENV }}
    - name: Create temporary directory
      run: sudo mkdir temp_dir
    - name: Copy files to temporary directory
      run: find . -mindepth 1 -maxdepth 1 -not -name 'temp_dir' -exec cp -R {} temp_dir/ \;
    - name: Compress files
      run: sudo tar -zcvf app.tar.gz temp_dir
    - name: Remove temporary directory
      run: sudo rm -rf temp_dir
    - name: Copy dist files to server
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SERVER_IP }}  # Add your server IP address as a secret in your repository
        username: ${{ secrets.SERVER_USERNAME }}  # Add your server username as a secret
        key: ${{ secrets.SSH_PRIVATE_KEY }}  # Add your server SSH private key as a secret
        port: 22
        source: "app.tar.gz"
        target: "/var/www/html/dev-jana/citifinance-node-api/"  # Specify the destination path on your server
    - name: executing remote ssh commands connecting to server
      uses: appleboy/ssh-action@v1.0.3
      with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: cd /var/www/html/dev-jana/citifinance-node-api && pm2 start server.js --name 'development-node-cicd' 
          #  "cd /path/to/destination/on/server && npm install && npm start"
    # - run: pm2 start server.js --name "dev-node-api"
    