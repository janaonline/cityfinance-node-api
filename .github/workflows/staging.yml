# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Check development branch 

on:
  pull_request:
    types: 
      - closed
    branches: 
      - "dev-jana" 

jobs:
#   test:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Get code
#         uses: actions/checkout@v3
#       - name: Cache dependencies
#         id: cache
#         uses: actions/cache@v3
#         with:
#           path: ~/.npm
#           key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
#       - name: Install dependencies
#         run: npm ci
#       - name: Test code check
#         id: run-tests
#         run: npm run test
#       - name: Upload test report
#         if: failure() && steps.run-tests.outcome == 'failure'
#         uses: actions/upload-artifact@v3
#         with:
#           name: test-report
#           path: test.json

  build:
    # needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.17.5]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/ 
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    - name: Install Dependencies
      run: npm install
    - name: Create staging environment file 
      run: |
        touch .env
        echo "$DEV_CITY_ENV" | sudo tee .env >/dev/null
      env:
        DEV_CITY_ENV: ${{ secrets.DEV_CITY_ENV }}
    # - run: pm2 restart index.js --name "login"
    # - name: Start the server 
    #   run: npm start 
    - name: Set permissions
      run: chmod -R 777 /var/www/html/dev-jana/citifinance-node-api/
    - name: Copy dist files to server
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.SERVER_IP }}  # Add your server IP address as a secret in your repository
        username: ${{ secrets.SERVER_USERNAME }}  # Add your server username as a secret
        key: ${{ secrets.SSH_PRIVATE_KEY }}  # Add your server SSH private key as a secret
        port: 22
        source: "."  # Adjust this path based on your project structure
        target: "/var/www/html/dev-jana/citifinance-node-api/"  # Specify the destination path on your server
    
    - name: SSH into server and start server
      run: ssh -i ${{ secrets.SSH_PRIVATE_KEY }} ${{ secrets.SERVER_USERNAME }}@${{ secrets.SERVER_IP }} "cd /var/www/html/dev-jana/citifinance-node-api/ &&  pm2 start server.js --name "dev-node-api"

          #  "cd /path/to/destination/on/server && npm install && npm start"
    # - run: pm2 start server.js --name "dev-node-api"
    
